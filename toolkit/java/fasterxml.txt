fasterxml 

	## 简介： 

		json相关工具类，可以用来进行 POJO-JSON之间的数据转换，即如其命名含义：jackson-databind。

	## 相关网址：

		[fasterxml](https://www.baeldung.com/jackson)

		[github](https://github.com/FasterXML/jackson-databind)

		[docs](https://github.com/FasterXML/jackson-docs)

		[jackson-annotation](https://www.baeldung.com/jackson-annotations)

		[tutorial](https://www.baeldung.com/jackson)

	## 用法：


		### Get it!

			```xml
				<properties>
				  ...
				  <!-- Use the latest version whenever possible. -->
				  <jackson.version>2.10.0</jackson.version>
				  ...
				</properties>

				<dependencies>
				  ...
				  <dependency>
				    <groupId>com.fasterxml.jackson.core</groupId>
				    <artifactId>jackson-databind</artifactId>
				    <version>${jackson.version}</version>
				  </dependency>
				  ...
				</dependencies>
			```	

			-- 版本说明：

				Core components may rely on any methods included in the supported JDK 
					Minimum JDK version was 1.5 until (and including) version 2.3
					Minimum JDK version was 1.6 for Jackson 2.4 - 2.7 (inclusive) for all core components 
						Minimum is still 1.6 for jackson-annotations and jackson-core, for all remaining Jackson 2.x versions
					Minimum JDK version is 1.7 for Jackson 2.7 - 2.10 of jackson-databind and most non-core components

				Jackson-databind (this package) depends on the other two (annotations, streaming).

		### Use It!	

			#### POJOs to JSON and back

				```java

					// Note: can use getters/setters as well; here we just use public fields directly:
					public class MyValue {
					  public String name;
					  public int age;
					  // NOTE: if using getters/setters, can keep fields `protected` or `private`
					}

				```

				```java

					ObjectMapper mapper = new ObjectMapper(); // create once, reuse

					/* json -> pojo */

						MyValue value = mapper.readValue(new File("data.json"), MyValue.class);
						// or:
						value = mapper.readValue(new URL("http://some.com/api/entry.json"), MyValue.class);
						// or:
						value = mapper.readValue("{\"name\":\"Bob\", \"age\":13}", MyValue.class);


					/* pojo -> json */

						mapper.writeValue(new File("result.json"), myResultObject);
						// or:
						byte[] jsonBytes = mapper.writeValueAsBytes(myResultObject);
						// or:
						String jsonString = mapper.writeValueAsString(myResultObject);

				```

			#### Generic collections, Tree Model
			
				```java

					/* pojo -> collections */

						Map<String, Integer> scoreByName = mapper.readValue(jsonSource, Map.class);
						List<String> names = mapper.readValue(jsonSource, List.class);

						// and can obviously write out as well
						mapper.writeValue(new File("names.json"), names);

						Map<String, ResultValue> results = mapper.readValue(jsonSource,
						   new TypeReference<Map<String, ResultValue>>() { } );
						// why extra work? Java Type Erasure will prevent type detection otherwise	

					/* pojo <-> tree model */		

						// can be read as generic JsonNode, if it can be Object or Array; or,
						// if known to be Object, as ObjectNode, if array, ArrayNode etc:
						ObjectNode root = mapper.readTree("stuff.json");
						String name = root.get("name").asText();
						int age = root.get("age").asInt();

						// can modify as well: this adds child Object as property 'other', set property 'type'
						root.with("other").put("type", "student");
						String json = mapper.writeValueAsString(root);

						// with above, we end up with something like as 'json' String:
						// {
						//   "name" : "Bob", "age" : 13,
						//   "other" : {
						//      "type" : "student"
						//   }
						// }

				```	

			#### Streaming parser, generator
			
				```java

					JsonFactory f = mapper.getFactory(); // may alternatively construct directly too

					// First: write simple JSON output
					File jsonFile = new File("test.json");
					JsonGenerator g = f.createGenerator(jsonFile);
					// write JSON: { "message" : "Hello world!" }
					g.writeStartObject();
					g.writeStringField("message", "Hello world!");
					g.writeEndObject();
					g.close();

					// Second: read file back
					JsonParser p = f.createParser(jsonFile);

					JsonToken t = p.nextToken(); // Should be JsonToken.START_OBJECT
					t = p.nextToken(); // JsonToken.FIELD_NAME
					if ((t != JsonToken.FIELD_NAME) || !"message".equals(p.getCurrentName())) {
					   // handle error
					}
					t = p.nextToken();
					if (t != JsonToken.VALUE_STRING) {
					   // similarly
					}
					String msg = p.getText();
					System.out.printf("My message to you is: %s!\n", msg);
					p.close();

				```	

			#### configuration

				##### Commonly used Features
				
					```java

						// SerializationFeature for changing how JSON is written

							// to enable standard indentation ("pretty-printing"):
							mapper.enable(SerializationFeature.INDENT_OUTPUT);
							// to allow serialization of "empty" POJOs (no properties to serialize)
							// (without this setting, an exception is thrown in those cases)
							mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
							// to write java.util.Date, Calendar as number (timestamp):
							mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

							// DeserializationFeature for changing how JSON is read as POJOs:

							// to prevent exception when encountering unknown property:
							mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
							// to allow coercion of JSON empty String ("") to null Object value:
							mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

						// JsonParser.Feature for configuring parsing settings:

							// to allow C/C++ style comments in JSON (non-standard, disabled by default)
							// (note: with Jackson 2.5, there is also `mapper.enable(feature)` / `mapper.disable(feature)`)
							mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
							// to allow (non-standard) unquoted field names in JSON:
							mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
							// to allow use of apostrophes (single quotes), non standard
							mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);

							// JsonGenerator.Feature for configuring low-level JSON generation:

							// to force escaping of non-ASCII characters:
							mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);	

					```	

				##### Annotations: 

					###### changing property names
				
						```java

							public class MyBean {
							   private String _name;

							   // without annotation, we'd get "theName", but we want "name":
							   @JsonProperty("name")
							   public String getTheName() { return _name; }

							   // note: it is enough to add annotation on just getter OR setter;
							   // so we can omit it here
							   public void setTheName(String n) { _name = n; }
							}

						```		

					###### Ignoring properties
					
						```java

							// means that if we see "foo" or "bar" in JSON, they will be quietly skipped
							// regardless of whether POJO has such properties
							@JsonIgnoreProperties({ "foo", "bar" })
							public class MyBean
							{
							   // will not be written as JSON; nor assigned from JSON:
							   @JsonIgnore
							   public String internal;

							   // no annotation, public field is read/written normally
							   public String external;

							   @JsonIgnore
							   public void setCode(int c) { _code = c; }

							   // note: will also be ignored because setter has annotation!
							   public int getCode() { return _code; }
							}


							public class ReadButDontWriteProps {
							   private String _name;
							   @JsonProperty public void setName(String n) { _name = n; }
							   @JsonIgnore public String getName() { return _name; }
							}
							// in this case, no "name" property would be written out (since 'getter' is ignored); 
							// but if "name" property was found from JSON, it would be assigned to POJO property!


						```	

					###### using custom constructor

						```java
					
							public class CtorBean
							{
							  public final String name;
							  public final int age;

							  @JsonCreator // constructor can be public, private, whatever
							  private CtorBean(@JsonProperty("name") String name,
							    @JsonProperty("age") int age)
							  {
							      this.name = name;
							      this.age = age;
							  }
							}	

							public class FactoryBean
							{
							    // fields etc omitted for brewity

							    @JsonCreator
							    public static FactoryBean create(@JsonProperty("name") String name) {
							      // construct and return an instance
							    }
							}

						```		

			#### fancier stuff, conversions

				```java

					// pojo -> pojo

						ResultType result = mapper.convertValue(sourceObject, ResultType.class);

					// Convert from List<Integer> to int[]

						List<Integer> sourceList = ...;
						int[] ints = mapper.convertValue(sourceList, int[].class);

					// Convert a POJO into Map!

						Map<String,Object> propertyMap = mapper.convertValue(pojoValue, Map.class);

					// ... and back

						PojoType pojo = mapper.convertValue(propertyMap, PojoType.class);

					// decode Base64! (default byte[] representation is base64-encoded String)

						String base64 = "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz";
						byte[] binary = mapper.convertValue(base64, byte[].class);

				```

			#### Creating Custom Serializer or Deserializer 


			
				```java

					/** an example of custom JSON serializer: */
					public class CustomCarSerializer extends StdSerializer<Car> {
     
					    public CustomCarSerializer() {
					        this(null);
					    }
					 
					    public CustomCarSerializer(Class<Car> t) {
					        super(t);
					    }
					 
					    @Override
					    public void serialize(
					      Car car, JsonGenerator jsonGenerator, SerializerProvider serializer) {
					        jsonGenerator.writeStartObject();
					        jsonGenerator.writeStringField("car_brand", car.getType());
					        jsonGenerator.writeEndObject();
					    }
					}

					/** custom serializer can be invoked like this: */
					ObjectMapper mapper = new ObjectMapper();
					SimpleModule module = 
					  new SimpleModule("CustomCarSerializer", new Version(1, 0, 0, null, null, null));
					module.addSerializer(Car.class, new CustomCarSerializer());
					mapper.registerModule(module);
					Car car = new Car("yellow", "renault");
					String carJson = mapper.writeValueAsString(car);


					// Here's what the Car looks like (as JSON output) on the client side:
					var carJson = {"car_brand":"renault"}

				```	

				```java

					/** an example of a custom JSON deserializer: */

					public class CustomCarDeserializer extends StdDeserializer<Car> {
     
					    public CustomCarDeserializer() {
					        this(null);
					    }
					 
					    public CustomCarDeserializer(Class<?> vc) {
					        super(vc);
					    }
					 
					    @Override
					    public Car deserialize(JsonParser parser, DeserializationContext deserializer) {
					        Car car = new Car();
					        ObjectCodec codec = parser.getCodec();
					        JsonNode node = codec.readTree(parser);
					         
					        // try catch block
					        JsonNode colorNode = node.get("color");
					        String color = colorNode.asText();
					        car.setColor(color);
					        return car;
					    }
					}

					/** custom deserializer can be invoked in the following way	*/
					String json = "{ \"color\" : \"Black\", \"type\" : \"BMW\" }";
					ObjectMapper mapper = new ObjectMapper();
					SimpleModule module =
					  new SimpleModule("CustomCarDeserializer", new Version(1, 0, 0, null, null, null));
					module.addDeserializer(Car.class, new CustomCarDeserializer());
					mapper.registerModule(module);
					Car car = mapper.readValue(json, Car.class);

				```

			#### Handling Date Formats
			
				```java

					ObjectMapper objectMapper = new ObjectMapper();
					DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm a z");
					objectMapper.setDateFormat(df);
					String carAsString = objectMapper.writeValueAsString(request);
					// output: {"car":{"color":"yellow","type":"renault"},"datePurchased":"2016-07-03 11:43 AM CEST"}

				```	

			#### Handling Collections
			
				```java

					/** generate the result as an array: */
					String jsonCarArray = 
					  "[{ \"color\" : \"Black\", \"type\" : \"BMW\" }, { \"color\" : \"Red\", \"type\" : \"FIAT\" }]";
					ObjectMapper objectMapper = new ObjectMapper();
					objectMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true);
					Car[] cars = objectMapper.readValue(jsonCarArray, Car[].class);
					// print cars

					/** generate the result as an list: */
					String jsonCarArray = 
					  "[{ \"color\" : \"Black\", \"type\" : \"BMW\" }, { \"color\" : \"Red\", \"type\" : \"FIAT\" }]";
					ObjectMapper objectMapper = new ObjectMapper();
					List<Car> listCar = objectMapper.readValue(jsonCarArray, new TypeReference<List<Car>>(){});
					// print cars

				```	

			#### Annotation

				##### Jackson Serialization Annotations

					-- @JsonAnyGetter

						```java

							public class ExtendableBean {
							    public String name;
							    private Map<String, String> properties;
							 
							    @JsonAnyGetter
							    public Map<String, String> getProperties() {
							        return properties;
							    }
							}

						```	

						result：

							{
							    "name":"My bean",
							    "attr2":"val2",
							    "attr1":"val1"
							}

					-- @JsonGetter
	
						```java

							public class MyBean {
							    public int id;
							    private String name;
							 
							    @JsonGetter("name")
							    public String getTheName() {
							        return name;
							    }
							}

						```

					-- @JsonPropertyOrder

						```java

							@JsonPropertyOrder({ "name", "id" })
							public class MyBean {
							    public int id;
							    public String name;
							}

						```	

						result:

							{
							    "id":1,
							    "name":"My bean"
							}

					-- @JsonRawValue
					
						```java

								{
								    "name":"My bean",
								    "json":{
								        "attr":false
								    }
								}

						```	

						result: 

							{
							    "name":"My bean",
							    "json":{
							        "attr":false
							    }
							}

					-- @JsonValue
					
						```java

							public enum TypeEnumWithValue {
							    TYPE1(1, "Type A"), TYPE2(2, "Type 2");
							 
							    private Integer id;
							    private String name;
							 
							    // standard constructors
							 
							    @JsonValue
							    public String getName() {
							        return name;
							    }
							}

						```

					-- @JsonRootName
		
						```java

							@JsonRootName(value = "user")
							public class UserWithRoot {
							    public int id;
							    public String name;
							}

						```
						result:

							{
							    "id": 1,
							    "name": "John"
							}
							-->
							{
							    "User": {
							        "id": 1,
							        "name": "John"
							    }
							}

						-- @JsonSerialize
						
							```java

								public class EventWithSerializer {
								    public String name;
								 
								    @JsonSerialize(using = CustomDateSerializer.class)
								    public Date eventDate;
								}

								public class CustomDateSerializer extends StdSerializer<Date> {
 
								    private static SimpleDateFormat formatter 
								      = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
								 
								    public CustomDateSerializer() { 
								        this(null); 
								    } 
								 
								    public CustomDateSerializer(Class<Date> t) {
								        super(t); 
								    }
								 
								    @Override
								    public void serialize(
								      Date value, JsonGenerator gen, SerializerProvider arg2) 
								      throws IOException, JsonProcessingException {
								        gen.writeString(formatter.format(value));
								    }
								}
	
							```

					##### Jackson Deserialization Annotations
					
						-- @JsonCreator
		
							```java

								public class BeanWithCreator {
								    public int id;
								    public String name;
								 
								    @JsonCreator
								    public BeanWithCreator(
								      @JsonProperty("id") int id, 
								      @JsonProperty("theName") String name) {
								        this.id = id;
								        this.name = name;
								    }
								}

							```		

							result:

								{
								    "id":1,
								    "theName":"My bean"
								}

						-- @JsonAnySetter
						-- @JsonSetter
						-- @JsonDeserialize
						-- @JsonAlias
							
							```java

								// Here, we have a POJO and we want to deserialize JSON with values such as fName, f_name, and firstName into the firstName variable of the POJO.
								public class AliasBean {
								    @JsonAlias({ "fName", "f_name" })
								    private String firstName;   
								    private String lastName;
								}

							```

					##### Jackson Property Inclusion Annotations

						-- @JsonIgnoreProperties

							```java

								@JsonIgnoreProperties({ "id" })
								public class BeanWithIgnore {
								    public int id;
								    public String name;
								}

							```		

						-- @JsonIgnore

							```java

								public class BeanWithIgnore {
								    @JsonIgnore
								    public int id;
								 
								    public String name;
								}

							```

						-- @JsonIgnoreType
						
							```java

								public class User {
								    public int id;
								    public Name name;
								 
								    @JsonIgnoreType
								    public static class Name {
								        public String firstName;
								        public String lastName;
								    }
								}

							```

						-- @JsonInclude
						
							```java

								@JsonInclude(Include.NON_NULL)
								public class MyBean {
								    public int id;
								    public String name;
								}

							```	

						-- @JsonAutoDetect

					##### Jackson Polymorphic Type Handling Annotations

						@JsonTypeInfo – indicates details of what type information to include in serialization
						@JsonSubTypes – indicates sub-types of the annotated type
						@JsonTypeName – defines a logical type name to use for annotated class

							```java

								public class Zoo {
								    public Animal animal;
								 
								    @JsonTypeInfo(
								      use = JsonTypeInfo.Id.NAME, 
								      include = As.PROPERTY, 
								      property = "type")
								    @JsonSubTypes({
								        @JsonSubTypes.Type(value = Dog.class, name = "dog"),
								        @JsonSubTypes.Type(value = Cat.class, name = "cat")
								    })
								    public static class Animal {
								        public String name;
								    }
								 
								    @JsonTypeName("dog")
								    public static class Dog extends Animal {
								        public double barkVolume;
								    }
								 
								    @JsonTypeName("cat")
								    public static class Cat extends Animal {
								        boolean likesCream;
								        public int lives;
								    }
								}

							```

							result:

								{
								    "animal": {
								        "type": "dog",
								        "name": "lacy",
								        "barkVolume": 0
								    }
								}

					##### Jackson General Annotations	

						-- @JsonProperty

							```java

								public class MyBean {
								    public int id;
								    private String name;
								 
								    @JsonProperty("name")
								    public void setTheName(String name) {
								        this.name = name;
								    }
								 
								    @JsonProperty("name")
								    public String getTheName() {
								        return name;
								    }
								}

							```

						-- @JsonFormat
						
							```java

								public class EventWithFormat {
							    public String name;
							 
							    @JsonFormat(
							      shape = JsonFormat.Shape.STRING,
							      pattern = "dd-MM-yyyy hh:mm:ss")
							    public Date eventDate;
							}

							```
						-- @JsonUnwrapped ： defines values that should be unwrapped/flattened when serialized/deserialized.

							```java

								public class UnwrappedUser {
								    public int id;
								 
								    @JsonUnwrapped
								    public Name name;
								 
								    public static class Name {
								        public String firstName;
								        public String lastName;
								    }
								}

							```

							result:

								{
								    "id":1,
								    "firstName":"John",
								    "lastName":"Doe"
								}

						-- @JsonView： indicates the View in which the property will be included for serialization/deserialization.
						
						-- @JsonManagedReference, @JsonBackReference： handle parent/child relationships and work around loops.

						-- @JsonIdentityInfo： indicates that Object Identity should be used when serializing/deserializing values 

						-- @JsonFilter： specifies a filter to use during serialization.

					##### Disable Jackson Annotation
					
						```java

							ObjectMapper mapper = new ObjectMapper();
    						mapper.disable(MapperFeature.USE_ANNOTATIONS);

						```	


		