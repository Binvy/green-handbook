J2EE基础知识：

	** JSP内置对象？

		request：封装客户端的请求，其中包含来自GET或POST请求的参数；
		response：封装服务器对客户端的响应；
		pageContext：通过该对象可以获取其他对象；
		session：封装用户会话的对象；
		application：封装服务器运行环境的对象；
		out：输出服务器响应的输出流对象；
		config：Web应用的配置对象；
		page：JSP页面本身（相当于Java程序中的this）；
		exception：封装页面抛出异常的对象。

		** request.getAttribute()和 request.getParameter()有何区别？

			从获取方向来看：
				getParameter()是获取 POST/GET 传递的参数值；
				getAttribute()是获取对象容器中的数据值；
			从用途来看：
				getParameter()用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或url重定向传值时接收数据用。
				getAttribute() 用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了 mapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。
				另外，可以用 setAttribute(),getAttribute() 发送接收对象.而 getParameter() 显然只能传字符串。 setAttribute() 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样getAttribute()就能取得你所设下的值，当然这种方法可以传对象。session也一样，只是对象在内存中的生命周期不一样而已。getParameter()只是应用服务器在分析你送上来的 request页面的文本时，取得你设在表单或 url 重定向时的值。
			总结：
				getParameter()返回的是String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）
				getAttribute()返回的是Object，需进行转换,可用setAttribute()设置成任意对象，使用很灵活，可随时用

	** JSP动态包含、静态包含的区别？

		动态INCLUDE 

			用法：<jsp:include page="included.jsp" flush="true" /> 

			说明：它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数，先编译之后再进行处理。 

			原因：
				1、静态include的结果是把其他jsp引入当前jsp,两者合为一体。 
				2、静态include纯粹是把代码写在外面的一种共享方法,所有的变量都是可以和include它的主文件共享,两者高度紧密结合,不能有变量同名的冲突.而页面设置也可以借用主文件的. 

		静态INCLUDE 

			用法：<%@ include file="included.htm" %> 

			说明：用include伪码实现,定不会检查所含文件的变化，适用于包含静态页面，直接将内容先包含后处理。 

			原因：
				1、动态include的结构是两者独立,直到输出时才合并( 看看jsp生成的java文件就可以知道了)。 
				2、动态include的jsp文件独立性很强,是一个单独的jsp文件,需要使用的对象,页面设置,都必须有自己创建,当然,还好它和include它的页面的request范围是一致的。 

	** Cookie和Session的的区别

		Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。

			Cookie 一般用来保存用户信息 比如
				①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；

				②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 
				值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；

				③登录一次网站后访问网站其他页面不需要重新登录。
				
			Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。

		Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。

		Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。
