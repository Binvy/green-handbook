XML解析: https://blog.csdn.net/M_Jack/article/details/87373036

(1)DOM解析
	DOM是html和xml的应用程序接口(API)，以层次结构（类似于树型）来组织节点和信息片段，映射XML文档的结构，允许获取
	和操作文档的任意部分，是W3C的官方标准
	【优点】
		①允许应用程序对数据和结构做出更改。
		②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。
	【缺点】
		①通常需要加载整个XML文档来构造层次结构，消耗资源大。
	【解析详解】
		①构建Document对象：
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = bdf.newDocumentBuilder();
			InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(xml文件);
			Document doc = bd.parse(is);
		②遍历DOM对象
			Document：	XML文档对象，由解析器获取
			NodeList：	节点数组
			Node：		节点(包括element、#text)
			Element：	元素，可用于获取属性参数

(2)SAX(Simple API for XML)解析
	流模型中的"推"模型分析方式。通过事件驱动，每发现一个节点就引发一个事件，事件推给事件处理器，通过回调方法
	完成解析工作，解析XML文档的逻辑需要应用程序完成
	【优势】
		①不需要等待所有数据都被处理，分析就能立即开始。
		②只在读取数据时检查数据，不需要保存在内存中。
		③可以在某个条件得到满足时停止解析，不必解析整个文档。
		④效率和性能较高，能解析大于系统内存的文档。
	【缺点】
		①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。
		②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。
	【原理】
		简单的说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束时通知事件
		处理函数(回调函数)，进行相应处理，直到文档结束
	【事件处理器类型】
		①访问XML DTD：DTDHandler
		②低级访问解析错误：ErrorHandler
		③访问文档内容：ContextHandler
	【DefaultHandler类】
		SAX事件处理程序的默认基类，实现了DTDHandler、ErrorHandler、ContextHandler和EntityResolver接口，通常
		做法是，继承该基类，重写需要的方法，如startDocument()
	【创建SAX解析器】
		SAXParserFactory saxf = SAXParserFactory.newInstance();
		SAXParser sax = saxf.newSAXParser();
	注：关于遍历
		①深度优先遍历(Depthi-First Traserval)
		②广度优先遍历(Width-First Traserval)

(3)JDOM(Java-based Document Object Model)
	Java特定的文档对象模型。自身不包含解析器，使用SAX
	【优点】
		①使用具体类而不是接口，简化了DOM的API。
		②大量使用了Java集合类，方便了Java开发人员。
	【缺点】
		①没有较好的灵活性。
		②性能较差。

(4)DOM4J(Document Object Model for Java)
	简单易用，采用Java集合框架，并完全支持DOM、SAX和JAXP
	【优点】
		①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。
		②支持XPath。
		③有很好的性能。
	【缺点】
		①大量使用了接口，API较为复杂。

(5)StAX(Streaming API for XML)
	流模型中的拉模型分析方式。提供基于指针和基于迭代器两种方式的支持,JDK1.6新特性
	【和推式解析相比的优点】
		①在拉式解析中，事件是由解析应用产生的，因此拉式解析中向客户端提供的是解析规则，而不是解析器。
		②同推式解析相比，拉式解析的代码更简单，而且不用那么多库。
		③拉式解析客户端能够一次读取多个XML文件。
		④拉式解析允许你过滤XML文件和跳过解析事件。
	【简介】
		StAX API的实现是使用了Java Web服务开发（JWSDP）1.6，并结合了Sun Java流式XML分析器(SJSXP)-它位于
		javax.xml.stream包中。XMLStreamReader接口用于分析一个XML文档，而XMLStreamWriter接口用于生成一个
		XML文档。XMLEventReader负责使用一个对象事件迭代子分析XML事件-这与XMLStreamReader所使用的光标机制
		形成对照。

 总结：

    1）DOM、JDOM、DOM4j都是把xml文档读取到内存中，生成dom对象进行遍历的；

         DOM是Java原生的，所以比较繁琐；

         JDOM是对DOM操作的封装，更加通俗、易记，操作也快了一点；

         DOM4j解析xml的函数上与JDOM差不多，只不过有几个相同功能的函数名字不同而已，过程都是一样的；但由于底层使用了Xpath等方法加快了索引，所以检索性能更快。

    2）SAX是基于事件驱动的，查询事件监听器继承自DefaultHandler，定义了检索xml过程中遇到开始标签、结束标签时执行的事件函数，从而查找需要的信息并返回而不是把整个文档都加载进来		

1. 介绍

	1）DOM(JAXP Crimson解析器) 
        DOM是用与平台和语言无关的方式表示XML文档的官方W3C标准。DOM是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而DOM被认为是基于树或基于对象的。DOM以及广义的基于树的处理具有几个优点。首先，由于树在内存中是持久的，因此可以修改它以便应用程序能对数据和结构作出更改。它还可以在任何时候在树中上下导航，而不是像SAX那样是一次性的处理。DOM使用起来也要简单得多。

	2）SAX (Simple API for XML)

        SAX处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX还比它的替代者DOM快许多。 
 　　
 	    选择DOM还是选择SAX？ 对于需要自己编写代码来处理XML文档的开发人员来说，  选择DOM还是SAX解析模型是一个非常重要的设计决策。 DOM采用建立树形结构的方式访问XML文档，而SAX采用的事件模型。 

　　    DOM解析器把XML文档转化为一个包含其内容的树，并可以对树进行遍历。用DOM解析模型的优点是编程容易，开发人员只需要调用建树的指令，然后利用navigation APIs访问所需的树节点来完成任务。可以很容易的添加和修改树中的元素。然而由于使用DOM解析器的时候需要处理整个XML文档，所以对性能和内存的要求比较高，尤其是遇到很大的XML文件的时候。由于它的遍历能力，DOM解析器常用于XML文档需要频繁的改变的服务中。 

　　     SAX解析器采用了基于事件的模型，它在解析XML文档的时候可以触发一系列的事件，当发现给定的tag的时候，它可以激活一个回调方法，告诉该方法制定的标签已经找到。SAX对内存的要求通常会比较低，因为它让开发人员自己来决定所要处理的tag。特别是当开发人员只需要处理文档中所包含的部分数据时，SAX这种扩展能力得到了更好的体现。但用SAX解析器的时候编码工作会比较困难，而且很难同时访问同一个文档中的多处不同数据。

	3）JDOM           http://www.jdom.org/

          JDOM的目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一个Java特定模型，JDOM一直得到大力推广和促进。正在考虑通过“Java规范请求JSR-102”将它最终用作“Java标准扩展”。从2000年初就已经开始了JDOM开发。

　　    JDOM与DOM主要有两方面不同。首先，JDOM仅使用具体类而不使用接口。这在某些方面简化了API，但是也限制了灵活性。第二，API大量使用了Collections类，简化了那些已经熟悉这些类的Java开发者的使用。

　　    JDOM文档声明其目的是“使用20%(或更少)的精力解决80%(或更多)Java/XML问题”(根据学习曲线假定为20%)。JDOM对于大多数Java/XML应用程序来说当然是有用的，并且大多数开发者发现API比DOM容易理解得多。JDOM还包括对程序行为的相当广泛检查以防止用户做任何在XML中无意义的事。然而，它仍需要您充分理解XML以便做一些超出基本的工作(或者甚至理解某些情况下的错误)。这也许是比学习DOM或JDOM接口都更有意义的工作。

　　    JDOM自身不包含解析器。它通常使用SAX2解析器来解析和验证输入XML文档(尽管它还可以将以前构造的DOM表示作为输入)。它包含一些转换器以将JDOM表示输出成SAX2事件流、DOM模型或XML文本文档。JDOM是在Apache许可证变体下发布的开放源码。

	4）DOM4J  （dom for java）http://dom4j.sourceforge.net/
             
        虽然DOM4J代表了完全独立的开发结果，但最初，它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过DOM4J API和标准DOM接口具有并行访问功能。从2000下半年开始，它就一直处于开发之中。

　　   为支持所有这些功能，DOM4J使用接口和抽象基本类方法。DOM4J大量使用了API中的Collections类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然DOM4J付出了更复杂的API的代价，但是它提供了比JDOM大得多的灵活性。

　　   在添加灵活性、XPath集成和对大文档处理的目标时，DOM4J的目标与JDOM是一样的：针对Java开发者的易用性和直观操作。它还致力于成为比JDOM更完整的解决方案，实现在本质上处理所有Java/XML问题的目标。在完成该目标时，它比JDOM更少强调防止不正确的应用程序行为。

　　   DOM4J是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML，特别值得一提的是连Sun的JAXM也在用DOM4J。 

2.. 比较

	1）DOM4J性能最好，连Sun的JAXM也在用DOM4J。目前许多开源项目中大量采用DOM4J，例如大名鼎鼎的Hibernate也用DOM4J来读取XML配置文件。如果不考虑可移植性，那就采用DOM4J.

	2）JDOM和DOM在性能测试时表现不佳，在测试10M文档时内存溢出。在小文档情况下还值得考虑使用DOM和JDOM。虽然JDOM的开发者已经说明他们期望在正式发行版前专注性能问题，但是从性能观点来看，它确实没有值得推荐之处。另外，DOM仍是一个非常好的选择。DOM实现广泛应用于多种编程语言。它还是许多其它与XML相关的标准的基础，因为它正式获得W3C推荐(与基于非标准的Java模型相对)，所以在某些类型的项目中可能也需要它(如在JavaScript中使用DOM)。

	3）SAX表现较好，这要依赖于它特定的解析方式－事件驱动。一个SAX检测即将到来的XML流，但并没有载入到内存.还有就是只能读取不能修改xml(当然当XML流被读入时，会有部分文档暂时隐藏在内存中)。

3. 四种xml操作方式的基本使用方法

	...

stackoverflow: https://stackoverflow.com/questions/5059224/which-is-the-best-library-for-xml-parsing-in-java?r=SearchResults

	Actually Java supports 4 methods to parse XML out of the box:

	DOM Parser/Builder: The whole XML structure is loaded into memory and you can use the well known DOM methods to work with it. DOM also allows you to write to the document with Xslt transformations. Example:

		public static void parse() throws ParserConfigurationException, IOException, SAXException {
		    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		    factory.setValidating(true);
		    factory.setIgnoringElementContentWhitespace(true);
		    DocumentBuilder builder = factory.newDocumentBuilder();
		    File file = new File("test.xml");
		    Document doc = builder.parse(file);
		    // Do something with the document here.
		}

	SAX Parser: Solely to read a XML document. The Sax parser runs through the document and calls callback methods of the user. There are methods for start/end of a document, element and so on. They're defined in org.xml.sax.ContentHandler and there's an empty helper class DefaultHandler.

		public static void parse() throws ParserConfigurationException, SAXException {
		    SAXParserFactory factory = SAXParserFactory.newInstance();
		    factory.setValidating(true);
		    SAXParser saxParser = factory.newSAXParser();
		    File file = new File("test.xml");
		    saxParser.parse(file, new ElementHandler());    // specify handler
		}

	StAx Reader/Writer: This works with a datastream oriented interface. The program asks for the next element when it's ready just like a cursor/iterator. You can also create documents with it. Read document:

		public static void parse() throws XMLStreamException, IOException {
		    try (FileInputStream fis = new FileInputStream("test.xml")) {
		        XMLInputFactory xmlInFact = XMLInputFactory.newInstance();
		        XMLStreamReader reader = xmlInFact.createXMLStreamReader(fis);
		        while(reader.hasNext()) {
		            reader.next(); // do something here
		        }
		    }
		}

		Write document:

		public static void parse() throws XMLStreamException, IOException {
		    try (FileOutputStream fos = new FileOutputStream("test.xml")){
		        XMLOutputFactory xmlOutFact = XMLOutputFactory.newInstance();
		        XMLStreamWriter writer = xmlOutFact.createXMLStreamWriter(fos);
		        writer.writeStartDocument();
		        writer.writeStartElement("test");
		        // write stuff
		        writer.writeEndElement();
		    }
		}

	JAXB: The newest implementation to read XML documents: Is part of Java 6 in v2. This allows us to serialize java objects from a document. You read the document with a class that implements a interface to javax.xml.bind.Unmarshaller (you get a class for this from JAXBContext.newInstance). The context has to be initialized with the used classes, but you just have to specify the root classes and don't have to worry about static referenced classes. You use annotations to specify which classes should be elements (@XmlRootElement) and which fields are elements(@XmlElement) or attributes (@XmlAttribute, what a surprise!)

		public static void parse() throws JAXBException, IOException {
		    try (FileInputStream adrFile = new FileInputStream("test")) {
		        JAXBContext ctx = JAXBContext.newInstance(RootElementClass.class);
		        Unmarshaller um = ctx.createUnmarshaller();
		        RootElementClass rootElement = (RootElementClass) um.unmarshal(adrFile);
		    }
		}

		Write document:

		public static void parse(RootElementClass out) throws IOException, JAXBException {
		    try (FileOutputStream adrFile = new FileOutputStream("test.xml")) {
		        JAXBContext ctx = JAXBContext.newInstance(RootElementClass.class);
		        Marshaller ma = ctx.createMarshaller();
		        ma.marshal(out, adrFile);
		    }
		}
		
	Examples shamelessly copied from some old lecture slides ;-)

	Edit: About "which API should I use?". Well it depends - not all APIs have the same capabilities as you see, but if you have control over the classes you use to map the XML document JAXB is my personal favorite, really elegant and simple solution (though I haven't used it for really large documents, it could get a bit complex). SAX is pretty easy to use too and just stay away from DOM if you don't have a really good reason to use it - old, clunky API in my opinion. I don't think there are any modern 3rd party libraries that feature anything especially useful that's missing from the STL and the standard libraries have the usual advantages of being extremely well tested, documented and stable.