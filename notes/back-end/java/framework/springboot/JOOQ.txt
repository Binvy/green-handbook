JOOQ(Java Object Oriented Query): 

	url: https://www.jooq.org/

	user-manual: https://www.jooq.org/doc/3.13.2/manual-single-page/#jooq-in-7-steps-step3

	desciption: 

		jOOQ generates Java code from your database and lets you build type safe SQL queries through its fluent API.

	usage:
	
		1. Code Generation 

			pom.xml

				<plugin>
				    <groupId>org.jooq</groupId>
				    <artifactId>jooq-codegen-maven</artifactId>
				    <executions>
				        ...
				    </executions>
				    <dependencies>
				        <dependency>
				            <groupId>com.h2database</groupId>
				            <artifactId>h2</artifactId>
				            <version>${h2.version}</version>
				        </dependency>
				    </dependencies>
				    <configuration>
				        <jdbc>
				            <driver>org.h2.Driver</driver>
				            <url>jdbc:h2:~/yourdatabase</url>
				        </jdbc>
				        <generator>
				            ...
				        </generator>
				    </configuration>
				</plugin>

		2. Using DSLContext	

			java:

				@Component
				public class JooqExample implements CommandLineRunner {

				    private final DSLContext create;

				    @Autowired
				    public JooqExample(DSLContext dslContext) {
				        this.create = dslContext;
				    }

				}

				public List<GregorianCalendar> authorsBornAfter1980() {
				    return this.create.selectFrom(AUTHOR)
				        .where(AUTHOR.DATE_OF_BIRTH.greaterThan(new GregorianCalendar(1980, 0, 1)))
				        .fetch(AUTHOR.DATE_OF_BIRTH);
				}

		3. jOOQ SQL Dialect
		
			spring.jooq.sql-dialect

		4. Customizing jOOQ
			
			ConnectionProvider

			ExecutorProvider

			TransactionProvider

			RecordMapperProvider

			RecordUnmapperProvider

			Settings

			RecordListenerProvider

			ExecuteListenerProvider

			VisitListenerProvider

			TransactionListenerProvider			

	examples:

		----------------------------------------------------------

		SQL: 

			SELECT TITLE
			FROM BOOK
			WHERE BOOK.PUBLISHED_IN = 2011
			ORDER BY BOOK.TITLE

		JAVA:
			create.select(BOOK.TITLE)
			      .from(BOOK)
			      .where(BOOK.PUBLISHED_IN.eq(2011))
			      .orderBy(BOOK.TITLE)	

		----------------------------------------------------------	      

		SQL:
			
			SELECT AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME, COUNT(*)
			FROM AUTHOR
			JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID
			WHERE BOOK.LANGUAGE = 'DE'
			AND BOOK.PUBLISHED > DATE '2008-01-01'
			GROUP BY AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME
			HAVING COUNT(*) > 5
			ORDER BY AUTHOR.LAST_NAME ASC NULLS FIRST
			LIMIT 2
			OFFSET 1	

		JAVA:	      

			create.select(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME, count())
			      .from(AUTHOR)
			      .join(BOOK).on(AUTHOR.ID.equal(BOOK.AUTHOR_ID))
			      .where(BOOK.LANGUAGE.eq("DE"))
			      .and(BOOK.PUBLISHED.gt(date("2008-01-01")))
			      .groupBy(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)
			      .having(count().gt(5))
			      .orderBy(AUTHOR.LAST_NAME.asc().nullsFirst())
			      .limit(2)
			      .offset(1)

		----------------------------------------------------------
		
		SQL:

			SELECT * FROM t WHERE (t.a, t.b) = (1, 2)

			SELECT * FROM t WHERE (t.a, t.b) OVERLAPS (date1, date2)

			SELECT * FROM t WHERE (t.a, t.b) IN (SELECT x, y)

			UPDATE t SET (a, b) = (SELECT x, y FROM t2 WHERE ...)

			INSERT INTO t (a, b) VALUES (1, 2)	  

		JAVA:	    

			select().from(t).where(row(t.a, t.b).eq(1, 2));
			// Type-check here: ----------------->  ^^^^
			select().from(t).where(row(t.a, t.b).overlaps(date1, date2));
			// Type-check here: ------------------------> ^^^^^^^^^^^^
			select().from(t).where(row(t.a, t.b).in(select(t2.x, t2.y)));
			// Type-check here: -------------------------> ^^^^^^^^^^
			update(t).set(row(t.a, t.b), select(t2.x, t2.y).where(...));
			// Type-check here: --------------> ^^^^^^^^^^
			insertInto(t, t.a, t.b).values(1, 2);
			// Type-check here: ---------> ^^^^