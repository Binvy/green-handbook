# Java数据校验：

	## 背景说明： 

		### 为什么要进行数据校验？什么场景下会用到数据校验？

			- web应用前后台交互（表现层）

					- 数据可能不会校验
					- 跳过前段数据校验，直接修改按钮样式等，然后直接提交表单到后台（比如有些表单数据是必输时，才会显示提交按钮等，但是会有人直接F12修改样式/前台JS校验方法）
					- 抓包工具拦截请求，修改数据信息，提交后台
					- 有一些业务逻辑相关的数据，在前台校验不方便

			- 接口开发中（服务层）

				- 对外提供接口

					接口字段，有多有少，几个/十几个/几十个，每个字段又有很多校验，比如非空/数值大小/字符串长度/日期时间格式等等，校验逻辑都在代码中实现：
						1. 通用性校验，业务逻辑关联性低
						2. 接口修改时，难以维护（比如，有些错误，只要出现就直接返回； 有些错误，是最后整合所有错误，一起提供给客户端）
						3. 校验程序执行也是不容忽视的（特别是接口调用次数很多的时候）

				- 调用外部接口	
						
					有两种选择：
						1. 不做任何校验，直接调用，信息校验交给接口提供方，返回错误
						2. 自己做校验，校验不通过，直接返回，校验通过再调用接口

			- 数据持久化（数据层）

				在数据持久化前，进行校验


		### 可用框架： 各个场景下，有哪些数据校验的方式？

			- 纯手工代码校验： 校验字段较少时

			- SpringMVC校验： 

				@RequestParam @NotNull...

			- Spring校验： 	

			- Hibernate-Validator： 

		### 为什么我们使用Hibernate-Validator框架？

			- 实现了Bean Validation JSR-303规范

	## 基本用法：


	## 高级用法：








