# Java数据校验：

	## 背景说明： 

		### 为什么要进行数据校验？什么场景下会用到数据校验？

			- web应用前后台交互（表现层）

					- 数据可能不会校验
					- 跳过前段数据校验，直接修改按钮样式等，然后直接提交表单到后台（比如有些表单数据是必输时，才会显示提交按钮等，但是会有人直接F12修改样式/前台JS校验方法）
					- 抓包工具拦截请求，修改数据信息，提交后台
					- 有一些业务逻辑相关的数据，在前台校验不方便

			- 接口开发中（服务层）

				- 对外提供接口

					接口字段，有多有少，几个/十几个/几十个，每个字段又有很多校验，比如非空/数值大小/字符串长度/日期时间格式等等，校验逻辑都在代码中实现：
						1. 通用性校验，业务逻辑关联性低
						2. 接口修改时，难以维护（比如，有些错误，只要出现就直接返回； 有些错误，是最后整合所有错误，一起提供给客户端）
						3. 校验程序执行也是不容忽视的（特别是接口调用次数很多的时候）

				- 调用外部接口	
						
					有两种选择：
						1. 不做任何校验，直接调用，信息校验交给接口提供方，返回错误
						2. 自己做校验，校验不通过，直接返回，校验通过再调用接口

			- 数据持久化（数据层）

				在数据持久化前，进行校验


		### 可用框架： 各个场景下，有哪些数据校验的方式？

			- 纯手工代码校验： 校验字段较少时

			- SpringMVC校验： 

				@RequestParam @NotNull...

			- Spring校验： 	

			- Hibernate-Validator： 

		### 为什么我们使用Hibernate-Validator框架？

			- 实现了Bean Validation JSR-380规范

Hibernate Validator 6.0.17.Final ——— JSR 380 Reference Implementation

前言：

	数据校验是贯穿所有应用层级的通用任务，从表现层到持久层，每层的校验逻辑基本相同，如果都单独实现，一是浪费时间，另外也容易发生错误。
	为了避免重复校验，开发一般会将校验逻辑直接绑定到实体类，但是实体类本身通常属于一个固定不变的元组件，添加校验代码后就会变得比较杂乱。


		Web页面  ————————  Controller展示层  ————————  Business业务层  ———————— DAO持久层  ————————  数据库
								\                                                  /
								 \________________________ java __________________/


	JSR 380 - Bean Validation - 定义了实体、方法校验的基础模型和API。 
	默认组件是使用注解，可以通过XML进行重写、扩展。 API也没有限制，配置/编码，Web层/持久层，server端/Swing端，均可以使用，

	Hibernate Validator就是JSR380的实现， 提供了对API、TCK的实现，在Apache Software License 2.0协议下开源。

1.开始

	前期准备：

		JDK1.8

		Maven

		有网（maven下载相关依赖使用）

	1.1 项目引入：

		pom.xml：

			<dependency>
				<groupId>org.hibernate.validator</groupId>
				<artifactId>hibernate-validator</artifactId>
				<version>6.0.17.Final</version>
			</dependency			

	1.2 使用约束：

		i.e：

			实体类：

				import javax.validation.constraints.Min;
				import javax.validation.constraints.NotNull;
				import javax.validation.constraints.Size;

				public class Car {

					@NotNull
					private String manufacturer;

					@NotNull
					@Size(min = 2, max = 14)
					private String licensePlate;

					@Min(2)
					private int seatCount;

					public Car(String manufacturer, String licencePlate, int seatCount) {
						this.manufacturer = manufacturer;
						this.licensePlate = licencePlate;
						this.seatCount = seatCount;
					}

					//getters and setters ...
				}

	1.3 校验约束：	

		i.e：	

			测试类：
			
				import java.util.Set;
				import javax.validation.ConstraintViolation;
				import javax.validation.Validation;
				import javax.validation.Validator;
				import javax.validation.ValidatorFactory;

				import org.junit.BeforeClass;
				import org.junit.Test;

				import static org.junit.Assert.assertEquals;

				public class CarTest {

					private static Validator validator;

					@BeforeClass
					public static void setUpValidator() {
						ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
						validator = factory.getValidator();
					}

					@Test
					public void manufacturerIsNull() {
						Car car = new Car( null, "DD-AB-123", 4 );

						Set<ConstraintViolation<Car>> constraintViolations =
								validator.validate( car );

						assertEquals( 1, constraintViolations.size() );
						assertEquals( "must not be null", constraintViolations.iterator().next().getMessage() );
					}

					@Test
					public void licensePlateTooShort() {
						Car car = new Car( "Morris", "D", 4 );

						Set<ConstraintViolation<Car>> constraintViolations =
								validator.validate( car );

						assertEquals( 1, constraintViolations.size() );
						assertEquals(
								"size must be between 2 and 14",
								constraintViolations.iterator().next().getMessage()
						);
					}

					@Test
					public void seatCountTooLow() {
						Car car = new Car( "Morris", "DD-AB-123", 1 );

						Set<ConstraintViolation<Car>> constraintViolations =
								validator.validate( car );

						assertEquals( 1, constraintViolations.size() );
						assertEquals(
								"must be greater than or equal to 2",
								constraintViolations.iterator().next().getMessage()
						);
					}

					@Test
					public void carIsValid() {
						Car car = new Car( "Morris", "DD-AB-123", 2 );

						Set<ConstraintViolation<Car>> constraintViolations =
								validator.validate( car );

						assertEquals( 0, constraintViolations.size() );
					}
				}	

	1.4 推荐阅读

		Chapter14 Funter reading: Hibernate Validator和Bean Validation的架构思想。

		Chapter2 实体约束的声明、校验

		Chapter3 方法约束的声明、校验

		Chapter6 自定义约束

	// done 2020-3-17 23:00:07	

2. 声明、校验实体约束

3. 声明、校验方法约束 		

4. 添加约束的错误消息

	4.1 默认消息

		消息参数: {}
		消息表达式: ${}

		解析规则：

			1. 国际化

				ValidationMessage.properties
				ValidationMessage_en_US.properties
				ValidationMessage_zh_CN.properties

			2. ValidationMessages	

			3. 约束属性值
			
				Size#min(): must not be least {min}

			4. EL表达式	

		4.1.1 转义字符
		
			\{ -> {
			\} -> }
			\$ -> $
			\\ -> \

		4.1.2 添加消息表达式	 

			EL表达式中可用的内容：

				- 约束中的属性值: 属性名称
				- 当前校验值（属性、对象、方法参数等等）: validatedValue
				- 对象映射: format(String format, Object... args) 类似 java.util.Formatter.format(String format, Object... args)

		4.1.3 例子

			实体类：

				public class Car {

					@NotNull
					private String manufacturer;

					@Size(
							min = 2,
							max = 14,
							message = "The license plate '${validatedValue}' must be between {min} and {max} characters long"
					)
					private String licensePlate;

					@Min(
							value = 2,
							message = "There must be at least {value} seat${value > 1 ? 's' : ''}"
					)
					private int seatCount;

					@DecimalMax(
							value = "350",
							message = "The top speed ${formatter.format('%1$.2f', validatedValue)} is higher " +
									"than {value}"
					)
					private double topSpeed;

					@DecimalMax(value = "100000", message = "Price must not be higher than ${value}")
					private BigDecimal price;

					public Car(
							String manufacturer,
							String licensePlate,
							int seatCount,
							double topSpeed,
							BigDecimal price) {
						this.manufacturer = manufacturer;
						this.licensePlate = licensePlate;
						this.seatCount = seatCount;
						this.topSpeed = topSpeed;
						this.price = price;
					}

					//getters and setters ...
				}

			测试类：

				public class CarTest {

					private static Validator validator;

					@BeforeClass
					public static void setUpValidator() {
						ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
						validator = factory.getValidator();
					}

					@Test
					public void messageDescriptors() {
						//tag::messageDescriptors[]
						Car car = new Car( null, "A", 1, 400.123456, BigDecimal.valueOf( 200000 ) );

						String message = validator.validateProperty( car, "manufacturer" )
								.iterator()
								.next()
								.getMessage();
						assertEquals( "must not be null", message );

						message = validator.validateProperty( car, "licensePlate" )
								.iterator()
								.next()
								.getMessage();
						assertEquals(
								"The license plate 'A' must be between 2 and 14 characters long",
								message
						);

						message = validator.validateProperty( car, "seatCount" ).iterator().next().getMessage();
						assertEquals( "There must be at least 2 seats", message );

						message = validator.validateProperty( car, "topSpeed" ).iterator().next().getMessage();
						assertEquals( "The top speed 400.12 is higher than 350", message );

						message = validator.validateProperty( car, "price" ).iterator().next().getMessage();
						assertEquals( "Price must not be higher than $100000", message );
						//end::messageDescriptors[]
					}
				}

	4.2	自定义消息

		实现：
	
			实现接口： java.validation.MessageInterpolator

			默认实现： Configuration#getDefaultMessageInterpolator()

		配置方法：

			- validation.xml

			- ValidatorFactory / Validator

		4.2.1 资源绑定地址：	

			- 默认

				Validator validator = Validation.byDefaultProvider()
						.configure()
						.messageInterpolator(
								new ResourceBundleMessageInterpolator(
										new PlatformResourceBundleLocator( "MyMessages" )
								)
						)
						.buildValidatorFactory()
						.getValidator();

			- 综合			

				Validator validator = Validation.byDefaultProvider()
				.configure()
				.messageInterpolator(
						new ResourceBundleMessageInterpolator(
								new AggregateResourceBundleLocator(
										Arrays.asList(
												"MyMessages",
												"MyOtherMessages"
										)
								)
						)
				)
				.buildValidatorFactory()
				.getValidator();

	// done 2020-3-21 15:21:00		

6. Creating custom constraint 				// done 2020-3-22 10:21:20

7. Value extraction							// done 2020-3-22 10:29:21

	Value值解析器： 处理从容器中取值的程序。（如：list, map, set, iterator, optional..）

	7.1 Built-in value extractors

		java.util.Iterable
		java.util.List
		java.util.Map
		java.util.Optional, java.util.OptionalInt, java.util.OptionalDouble, java.util.OptionalLong

	7.2 Implementing a ValueExtractor
	


8. Configuring via xml 						// done 2020-3-22 10:34:43				

9. Bootstraping 	

	9.1 获取ValidatorFactory和Validator

		默认：

			ValidatorFactory validatorFactory = validation.buildDefaultValidatorFactory();						
			Validator validator = validatorFactory.getValidator();

			== 等价于：

			ValidatorFactory validatorFactory = Validation.byDefaultProvider()
					.configure()
					.buildValidatorFactory();
			Validator validator = validatorFactory.getValidator();

		使用指定的provider:

			ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
					.configure()
					.buildValidatorFactory();
			Validator validator = validatorFactory.getValidator();
		

		tips:

			如果ValidatorFactory不再使用，使用validatorFactory.close()释放资源	

	9.2 配置ValidatorFactory
	
		xml配置失效：

			Configuration.ignoreXmlConfiguration();

		获取xml配置：

			Configuration.getBoorstrapConfiguration();

		9.1.1 消息集成器

			定义：

				public class MyMessageInterpolator implements MessageInterpolator {

					@Override
					public String interpolate(String messageTemplate, Context context) {
						//...
						return null;
					}

					@Override
					public String interpolate(String messageTemplate, Context context, Locale locale) {
						//...
						return null;
					}
				}

			配置：	
		
				public void messageInterpolator() {
					//tag::messageInterpolator[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.messageInterpolator( new MyMessageInterpolator() )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::messageInterpolator[]
				}

		9.1.2 属性解析器

			定义：

				public class MyTraversableResolver implements TraversableResolver {

					@Override
					public boolean isReachable(
							Object traversableObject,
							Node traversableProperty,
							Class<?> rootBeanType,
							Path pathToTraversableObject,
							ElementType elementType) {
						//...
						return false;
					}

					@Override
					public boolean isCascadable(
							Object traversableObject,
							Node traversableProperty,
							Class<?> rootBeanType,
							Path pathToTraversableObject,
							ElementType elementType) {
						//...
						return false;
					}
				}

			配置：	

				public void traversableResolver() {
					//tag::traversableResolver[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.traversableResolver( new MyTraversableResolver() )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::traversableResolver[]
				}

				------------------  关闭缓存功能 ------------------

				public void traversableResolverDisableCache() {
					//tag::traversableResolverDisableCache[]
					ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
							.configure()
							.traversableResolver( new MyFastTraversableResolver() )
							.enableTraversableResolverResultCache( false )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::traversableResolverDisableCache[]
				}

		9.2.3 ConstraintValidatorFactory
		
			定义：

				public class MyConstraintValidatorFactory implements ConstraintValidatorFactory {

					@Override
					public <T extends ConstraintValidator<?, ?>> T getInstance(Class<T> key) {
						//...
						return null;
					}

					@Override
					public void releaseInstance(ConstraintValidator<?, ?> instance) {
						//...
					}
				}	

			配置：
			
				public void constraintValidatorFactory() {
					//tag::constraintValidatorFactory[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.constraintValidatorFactory( new MyConstraintValidatorFactory() )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::constraintValidatorFactory[]
				}	

		9.2.4 ParameterNameProvider
		
			定义：

				public class MyParameterNameProvider implements ParameterNameProvider {

					@Override
					public List<String> getParameterNames(Constructor<?> constructor) {
						//...
						return null;
					}

					@Override
					public List<String> getParameterNames(Method method) {
						//...
						return null;
					}
				}

			配置：			

				public void parameterNameProvider() {
					//tag::parameterNameProvider[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.parameterNameProvider( new MyParameterNameProvider() )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::parameterNameProvider[]
				}

		9.2.5 ClockProvider和时间校验容错率

			定义：

				public class FixedClockProvider implements ClockProvider {

					private Clock clock;

					public FixedClockProvider(ZonedDateTime dateTime) {
						clock = Clock.fixed( dateTime.toInstant(), dateTime.getZone() );
					}

					@Override
					public Clock getClock() {
						return clock;
					}

				}

			配置：
		
				public void clockProvider() {
					//tag::clockProvider[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.clockProvider( new FixedClockProvider( ZonedDateTime.of( 2016, 6, 15, 0, 0, 0, 0, ZoneId.of( "Europe/Paris" ) ) ) )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::clockProvider[]
				}

				public void temporalValidationTolerance() {
					//tag::temporalValidationTolerance[]
					ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
							.configure()
							.temporalValidationTolerance( Duration.ofMillis( 10 ) )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::temporalValidationTolerance[]
				}

		9.2.6 注册Value解析器

			定义：

				public class MultimapKeyValueExtractor
						implements ValueExtractor<Multimap<@ExtractedValue ?, ?>> {

					@Override
					public void extractValues(Multimap<?, ?> originalValue, ValueReceiver receiver) {
						for ( Object key : originalValue.keySet() ) {
							receiver.keyedValue( "<multimap key>", key, key );
						}
					}
				}

				public class MultimapValueValueExtractor
						implements ValueExtractor<Multimap<?, @ExtractedValue ?>> {

					@Override
					public void extractValues(Multimap<?, ?> originalValue, ValueReceiver receiver) {
						for ( Entry<?, ?> entry : originalValue.entries() ) {
							receiver.keyedValue( "<multimap value>", entry.getKey(), entry.getValue() );
						}
					}
				}

			配置：
			
				public void valueExtractor() {
					//tag::valueExtractor[]
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.addValueExtractor( new MultimapKeyValueExtractor() )
							.addValueExtractor( new MultimapValueValueExtractor() )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::valueExtractor[]
				}

		9.2.7 添加Map Streams
		
				public void addMapping() {
					//tag::addMapping[]
					InputStream constraintMapping1 = null;
					InputStream constraintMapping2 = null;
					ValidatorFactory validatorFactory = Validation.byDefaultProvider()
							.configure()
							.addMapping( constraintMapping1 )
							.addMapping( constraintMapping2 )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::addMapping[]
				}	

		9.2.8 提供者特殊配置

			“failfast: 快速失败”

				public void providerSpecificOptions() {
					//tag::providerSpecificOptions[]
					ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
							.configure()
							.failFast( true )
							.addMapping( (ConstraintMapping) null )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::providerSpecificOptions[]
				}

				------------------ or ------------------

				public void providerSpecificOptionViaAddProperty() {
					//tag::providerSpecificOptionViaAddProperty[]
					ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
							.configure()
							.addProperty( "hibernate.validator.fail_fast", "true" )
							.buildValidatorFactory();
					Validator validator = validatorFactory.getValidator();
					//end::providerSpecificOptionViaAddProperty[]
				}

		9.2.9 配置脚本解析工厂ScriptEvaluatorFactory
		
			9.2.9.1 xml配置

				<?xml version="1.0" encoding="UTF-8"?>
				<validation-config
				        xmlns="http://xmlns.jcp.org/xml/ns/validation/configuration"
				        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/validation/configuration validation-configuration-2.0.xsd"
				        version="2.0">
				    <default-provider>org.hibernate.validator.HibernateValidator</default-provider>

				    <property name="hibernate.validator.enable_traversable_resolver_result_cache">false</property>

				    <property name="hibernate.validator.script_evaluator_factory">
				    	org.hibernate.validator.referenceguide.chapter09.CustomScriptEvaluatorFactory
				    </property>
				</validation-config>


			9.2.9.2	编码配置	

				定义：

					public class CustomScriptEvaluatorFactory implements ScriptEvaluatorFactory {

						@Override
						public ScriptEvaluator getScriptEvaluatorByLanguageName(String languageName) {
							return (script, bindings) -> true;
						}

						@Override
						public void clear() {
							// Nothing to do
						}
					}

				配置：	

					public void scriptEvaluatorFactoryProgrammatically() {
						//tag::scriptEvaluatorFactoryProgrammatically[]
						ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
								.configure()
								.scriptEvaluatorFactory( new CustomScriptEvaluatorFactory() )
								.buildValidatorFactory();
						Validator validator = validatorFactory.getValidator();
						//end::scriptEvaluatorFactoryProgrammatically[]
					}

			9.2.9.3 自定义ScriptEvaluatorFactory实现示例
			
				实现示例：org.hibernate.validator.osgi.scripting.MultiClassLoaderScriptEvaluatorFactory

				配置：

					public void scriptEvaluatorFactoryProgrammatically() {
						//tag::scriptEvaluatorFactoryProgrammatically[]
						ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
								.configure()
								.scriptEvaluatorFactory( new MultiClassLoaderScriptEvaluatorFactory(
									GroovyScriptEngineFactory.class.getClassLoader() )
								)
								.buildValidatorFactory();
						Validator validator = validatorFactory.getValidator();
						//end::scriptEvaluatorFactoryProgrammatically[]
					}

	9.2.3 配置一个校验器

		说明：

			定义一个新的校验器上下文，并返回属于该上下文的一个校验器

		配置：

			public void usingContext() {
				//tag::usingContext[]
				ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();

				Validator validator = validatorFactory.usingContext()
						.messageInterpolator( new MyMessageInterpolator() )
						.traversableResolver( new MyTraversableResolver() )
						.getValidator();
				//end::usingContext[]
			}

	// done 2020-3-22 11:23:33	
	
10. 使用约束元数据API

	10.1

11. 与其他框架的集成

	// done 2020-3-22 12:31:07

12. 特殊配置

13. 注解处理器

14. 更多

	// done 2020-3-25 22:48:25

		
	

















