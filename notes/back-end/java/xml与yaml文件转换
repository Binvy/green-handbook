xml与yaml文件转换：

	说明： 使用jackson进行相互转换。

	url: 

		xml: https://github.com/FasterXML/jackson-dataformat-xml
		yaml: https://github.com/FasterXML/jackson-dataformats-text/tree/master/yaml

	maven: 

		    <!-- jackson dataformat -->
	        <dependency>
	            <groupId>com.fasterxml.jackson.dataformat</groupId>
	            <artifactId>jackson-dataformat-xml</artifactId>
	            <version>2.9.8</version>
	        </dependency>
	        <dependency>
	            <groupId>com.fasterxml.jackson.dataformat</groupId>
	            <artifactId>jackson-dataformat-yaml</artifactId>
	            <version>2.9.8</version>
	        </dependency>
	        <dependency>
			    <groupId>com.fasterxml.woodstox</groupId>
			    <artifactId>woodstox-core</artifactId>
			    <version>5.1.0</version>
			</dependency>

	usage:
	
		pojo: MediaItem.java

				package com.binvi.springboot.demo03.book.javase.oxm;

				import java.util.ArrayList;
				import java.util.Arrays;
				import java.util.List;

				/**
				 * @author binvi
				 * @version 1.0
				 * @Description:
				 * @date 2020/6/29 22:43
				 */
				public class MediaItem {

					private MediaContent _content;
					private List<Image> _images;

					public MediaItem() { }

					public MediaItem(MediaContent c) {
						_content = c;
					}

					public void addPhoto(Image p) {
						if (_images == null) {
							_images = new ArrayList<Image>();
						}
						_images.add(p);
					}

					public List<Image> getImages() { return _images; }
					public void setImages(List<Image> p) { _images = p; }

					public MediaContent getContent() { return _content; }
					public void setContent(MediaContent c) { _content = c; }

					static class MediaContent
					{
						public enum Player { JAVA, FLASH;  }

						private Player _player;
						private String _uri;
						private String _title;
						private int _width;
						private int _height;
						private String _format;
						private long _duration;
						private long _size;
						private int _bitrate;
						private List<String> _persons;
						private String _copyright;

						public MediaContent() { }

						protected MediaContent(MediaContent src) {
							_player = src._player;
							_uri = src._uri;
							_title = src._title;
							_width = src._width;
							_height = src._height;
							_format = src._format;
							_duration = src._duration;
							_size = src._size;
							_bitrate = src._bitrate;
							_persons = src._persons;
							_copyright = src._copyright;
						}

						public void addPerson(String p) {
							if (_persons == null) {
								_persons = new ArrayList<String>();
							}
							_persons.add(p);
						}

						public Player getPlayer() { return _player; }
						public String getUri() { return _uri; }
						public String getTitle() { return _title; }
						public int getWidth() { return _width; }
						public int getHeight() { return _height; }
						public String getFormat() { return _format; }
						public long getDuration() { return _duration; }
						public long getSize() { return _size; }
						public int getBitrate() { return _bitrate; }
						public List<String> getPersons() { return _persons; }
						public String getCopyright() { return _copyright; }

						public void setPlayer(Player p) { _player = p; }
						public void setUri(String u) {  _uri = u; }
						public void setTitle(String t) {  _title = t; }
						public void setWidth(int w) {  _width = w; }
						public void setHeight(int h) {  _height = h; }
						public void setFormat(String f) {  _format = f;  }
						public void setDuration(long d) {  _duration = d; }
						public void setSize(long s) {  _size = s; }
						public void setBitrate(int b) {  _bitrate = b; }
						public void setPersons(List<String> p) {  _persons = p; }
						public void setCopyright(String c) {  _copyright = c; }
					}

					static class Image
					{
						private String _uri;
						private String _title;
						private int _width;
						private int _height;
						private Size _size;

						public Image() {}
						public Image(String uri, String title, int w, int h, Size s)
						{
							_uri = uri;
							_title = title;
							_width = w;
							_height = h;
							_size = s;
						}

						public String getUri() { return _uri; }
						public String getTitle() { return _title; }
						public int getWidth() { return _width; }
						public int getHeight() { return _height; }
						public Size getSize() { return _size; }

						public void setUri(String u) { _uri = u; }
						public void setTitle(String t) { _title = t; }
						public void setWidth(int w) { _width = w; }
						public void setHeight(int h) { _height = h; }
						public void setSize(Size s) { _size = s; }
					}

					enum Size { SMALL, LARGE; }

					static MediaItem getTempRecord() {
						MediaItem mediaItem = new MediaItem();

						MediaContent mediaContent = new MediaContent();
						mediaContent.setUri("http://javaone.com/keynote.mpg");
						mediaContent.setTitle("Javaone Keynote");
						mediaContent.setWidth(640);
						mediaContent.setHeight(480);
						mediaContent.setFormat("video/mpg4");
						mediaContent.setDuration(18000000);
						mediaContent.setSize(58982400);
						mediaContent.setBitrate(262144);
						mediaContent.setPersons(Arrays.asList("ill Gates", "Steve Jobs"));
						mediaContent.setCopyright("None");

						Image image1 = new Image();
						image1.setUri("http://javaone.com/keynote_large.jpg");
						image1.setTitle("Javaone Keynote");
						image1.setWidth(1024);
						image1.setHeight(768);
						image1.setSize(Size.LARGE);

						Image image2 = new Image();
						image2.setUri("http://javaone.com/keynote_small.jpg");
						image2.setTitle("Javaone Keynote");
						image2.setWidth(320);
						image2.setHeight(240);
						image2.setSize(Size.SMALL);

						mediaItem.setContent(mediaContent);
						mediaItem.setImages(Arrays.asList(image1, image2));
						return mediaItem;
					}

					String YAML =
							"---\n"
									+"content:\n"
									+"  uri: 'http://javaone.com/keynote.mpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 640\n"
									+"  height: 480\n"
									+"  format: 'video/mpg4'\n"
									+"  duration: 18000000\n"
									+"  size: 58982400\n"
									+"  bitrate: 262144\n"
									+"  persons:\n"
									+"  - 'Bill Gates'\n"
									+"  - 'Steve Jobs'\n"
									+"  player: 'JAVA'\n"
									+"  copyright: 'None'\n"
									+"images:\n"
									+"- uri: 'http://javaone.com/keynote_large.jpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 1024\n"
									+"  height: 768\n"
									+"  size: 'LARGE'\n"
									+"- uri: 'http://javaone.com/keynote_small.jpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 320\n"
									+"  height: 240\n"
									+"  size: 'SMALL'\n";

				}
		
		converter: XmlToYamlConverter.java

			package com.binvi.springboot.demo03.book.javase.oxm;

			import java.io.BufferedReader;
			import java.io.BufferedWriter;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.util.List;

			import com.fasterxml.jackson.dataformat.xml.XmlMapper;
			import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;

			/**
			 * @author binvi
			 * @version 1.0
			 * @Description:
			 * @date 2020/6/29 22:11
			 */
			public class XmlToYamlConverter {

				private static final Logger logger = LoggerFactory.getLogger(XmlToYamlConverter.class);

				private static final XmlMapper xmlMapper = new XmlMapper();
				private static final YAMLMapper yamlMapper = new YAMLMapper();

				private static String oxmDir = "src/main/resources/file";
				private static String xmlFile = "test.xml";
				private static String yamlFile = "test.yaml";

				Path xmlPath = Paths.get(oxmDir, xmlFile);
				Path yamlPath = Paths.get(oxmDir, yamlFile);

				public void convertBeanToXml() {
					try (BufferedWriter writer = Files.newBufferedWriter(xmlPath)) {
						MediaItem tempRecord = MediaItem.getTempRecord();
						xmlMapper.writeValue(writer, tempRecord);
						List<String> xmlLines = Files.readAllLines(xmlPath);
						logger.info("convert bean to xml end. result xml: {}", xmlLines);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertXmlToBean() {
					try (BufferedReader reader = Files.newBufferedReader(xmlPath)) {
						MediaItem mediaItem = xmlMapper.readValue(reader, MediaItem.class);
						logger.info("convert xml to bean end. result bean: {}", mediaItem);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertBeanToYaml() {
					try (BufferedWriter writer = Files.newBufferedWriter(yamlPath)) {
						yamlMapper.writeValue(writer, MediaItem.getTempRecord());
						List<String> yamlLines = Files.readAllLines(yamlPath);
						logger.info("convert bean to yaml end. result yaml: {}", yamlLines);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertYamlToBean() {
					try (BufferedReader reader = Files.newBufferedReader(yamlPath)) {
						MediaItem mediaItem = yamlMapper.readValue(reader, MediaItem.class);
						logger.info("convert yaml to bean end. result bean: {}", mediaItem);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertXmlToYaml() {
					try (BufferedReader xmlReader = Files.newBufferedReader(xmlPath);
						 BufferedWriter yamlWriter = Files.newBufferedWriter(yamlPath)) {
						logger.info("read json from xml start. xml: {}", Files.readAllLines(xmlPath));
						Object json = xmlMapper.readValue(xmlReader, Object.class);
						yamlMapper.writeValue(yamlWriter, json);
						logger.info("write json to yaml end. yaml: {}", Files.readAllLines(yamlPath));
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertYamlToXml() {
					try (BufferedReader yamlReader = Files.newBufferedReader(yamlPath);
						 BufferedWriter xmlWriter = Files.newBufferedWriter(xmlPath)) {
						logger.info("read json from yaml start. yaml: {}", Files.readAllLines(yamlPath));
						Object json = yamlMapper.readValue(yamlReader, Object.class);
						xmlMapper.writeValue(xmlWriter, json);
						logger.info("write json to yaml end. yaml: {}", Files.readAllLines(xmlPath));
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

			}

		test: XmlToYamlConverterTest.java
		
			package com.binvi.springboot.demo03.book.javase.oxm;

			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;

			import static org.junit.Assert.*;

			public class XmlToYamlConverterTest {

				private XmlToYamlConverter converter = new XmlToYamlConverter();

				@Before
				public void setUp() throws Exception {
				}

				@After
				public void tearDown() throws Exception {
				}

				@Test
				public void convertBeanToXml() {
					converter.convertBeanToXml();
				}

				@Test
				public void convertXmlToBean() {
					converter.convertXmlToBean();
				}

				@Test
				public void convertBeanToYaml() {
					converter.convertBeanToYaml();
				}

				@Test
				public void convertYamlToBean() {
					converter.convertYamlToBean();
				}

				@Test
				public void convertXmlToYaml() {
					converter.convertXmlToYaml();
				}

				@Test
				public void convertYamlToXml() {
					converter.convertYamlToXml();
				}
			}	


	test.xml:			

		<MediaItem>
			<Content>
				<Size>58982400</Size>
				<Format>video/mpg4</Format>
				<Copyright>None</Copyright>
				<Bitrate>262144</Bitrate>
				<Width>640</Width>
				<Height>480</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote.mpg</Uri>
				<Duration>18000000</Duration>
				<Persons>ill Gates</Persons>
				<Persons>Steve Jobs</Persons>
			</Content>
			<Images>
				<Size>LARGE</Size>
				<Width>1024</Width>
				<Height>768</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote_large.jpg</Uri>
			</Images>
			<Images>
				<Size>SMALL</Size>
				<Width>320</Width>
				<Height>240</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote_small.jpg</Uri>
			</Images>
		</MediaItem>

	test.yaml:
	
		---
		Content:
		  Size: "58982400"
		  Format: "video/mpg4"
		  Persons: "Steve Jobs"
		  Uri: "http://javaone.com/keynote.mpg"
		  Bitrate: "262144"
		  Copyright: "None"
		  Height: "480"
		  Title: "Javaone Keynote"
		  Duration: "18000000"
		  Width: "640"
		Images:
		  Size: "SMALL"
		  Uri: "http://javaone.com/keynote_small.jpg"
		  Height: "240"
		  Title: "Javaone Keynote"
		  Width: "320"
	

第二种方案（解决jackson中无法转换xml同名标签的问题）: json转换时使用org.json包替换，具体操作步骤：

	maven:

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20180130</version>
        </dependency>

    convert: 

    	// 参考io.github.assimbly:docconverter:1.3.0 org.assimbly.docconverter.DocConverter.java
    	
		@Test
		public void test() {
			try {
				String xml = new String(Files.readAllBytes(xmlPath));
				System.out.println(xml);

				JSONObject xmlJSONObj = XML.toJSONObject(xml);
				String json = xmlJSONObj.toString();
				System.out.println(json);

				JsonNode jsonNode = new ObjectMapper().readTree(json);
				String yaml = new YAMLMapper().writeValueAsString(jsonNode);
				System.out.println(yaml);
				
				Files.write(yamlPath, yaml.getBytes());
			} catch (IOException e) {
				e.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}    

后续需求：

	指定xml的保留节点，生成yaml文件。

		xml: 

			<MediaItem id="mediaItem">
				<Content id="content" name="content" class="java.lang.String" init="false" factory="none">
					<Size>58982400</Size>
					<Format>video/mpg4</Format>
					<Copyright>None</Copyright>
					<Bitrate>262144</Bitrate>
					<Width>640</Width>
					<Height>480</Height>
					<Title>Javaone Keynote</Title>
					<Uri>http://javaone.com/keynote.mpg</Uri>
					<Duration>18000000</Duration>
					<Persons>ill Gates</Persons>
					<Persons>Steve Jobs</Persons>
				</Content>
				<Images id="image" name="image" class="java.awt.Image">
					<Size>LARGE</Size>
					<Size>SMALL</Size>
					<Width>1024</Width>
					<Height>768</Height>
					<Title>Javaone Keynote</Title>
					<Uri>http://javaone.com/keynote_large.jpg</Uri>
				</Images>
				<Images id="image" name="image" class="java.awt.Image">
					<Size>LARGE</Size>
					<Size>SMALL</Size>
					<Width>320</Width>
					<Height>240</Height>
					<Title>Javaone Keynote</Title>
					<Uri>http://javaone.com/keynote_small.jpg</Uri>
				</Images>
			</MediaItem>

		yaml:
		
			---
			MediaItem:
			  Content:
			    init: false
			    factory: "none"
			    Size: 58982400
			    Title: "Javaone Keynote"
			    Duration: 18000000
			    Bitrate: 262144
			    Uri: "http://javaone.com/keynote.mpg"
			    Copyright: "None"
			    Format: "video/mpg4"
			    Persons:
			    - "ill Gates"
			    - "Steve Jobs"
			    name: "content"
			    Height: 480
			    id: "content"
			    class: "java.lang.String"
			    Width: 640
			  Images:
			  - Size:
			    - "LARGE"
			    - "SMALL"
			    name: "image"
			    Title: "Javaone Keynote"
			    Height: 768
			    id: "image"
			    class: "java.awt.Image"
			    Width: 1024
			    Uri: "http://javaone.com/keynote_large.jpg"
			  - Size:
			    - "LARGE"
			    - "SMALL"
			    name: "image"
			    Title: "Javaone Keynote"
			    Height: 240
			    id: "image"
			    class: "java.awt.Image"
			    Width: 320
			    Uri: "http://javaone.com/keynote_small.jpg"
			  id: "mediaItem"

		保留节点：	  

				/**
				 * 保留指定key集合的节点元素
				 * @param src
				 * @param exps
				 */
				private JSONObject filterNodes(JSONObject src, List<String> exps) {
					JSONObject dest = new JSONObject();
					for (String exp : exps) {
						filterNode(src, dest, exp);
					}
					return dest;
				}

				/**
				 * 根据表达式过滤节点
				 * @param src 源对象
				 * @param dest 目标对象
				 * @param exp 节点表达式
				 */
				private void filterNode(Object src, Object dest, String exp) {
					if (src == null || StringUtils.isEmpty(exp) ) {
						return;
					}
					String[] tags = exp.split("\\.");
					String tag;
					boolean last;
					for (int i = 0; i < tags.length; i++) {
						tag = tags[i];
						last = i == tags.length - 1;
						copyNodeByTag(src, dest, tag, last);
						if (!last) {
							src = getChildNodeByTag(src, tag);
							dest = getChildNodeByTag(dest, tag);
						}
					}
				}

				/**
				 * 获取指定节点下，指定名称的子节点
				 * @param node 节点对象
				 * @param tag 子节点名称
				 * @return 子节点
				 */
				private Object getChildNodeByTag(Object node, String tag) {
					if (node instanceOf JSONObject) {
						return ((JSONObject) node).opt(tag);	
					} else if (node instanceOf JSONArray) {
						JSONArray jsonArray = new JSONArray();
						for (int i = 0; i < ((JSONArray) node).length(); i++) {
							jsonArray.put(getChildNodeByTag(((JSONArray) node).get(i), tag));	
						}	
						return jsonArray;
					}
					return null;
				}

				/**
				 * 根据节点名称复制xml节点
				 * @param src 源节点
				 * @param dest 目标节点
				 * @param tag 节点名称
				 * @param last 是否为最终要保留的节点
				 */
				private void copyNodeByTag(Object src, Object dest, String tag, boolean last) {
					if (last) {
						if (src instanceof JSONObject) {
							((JSONObject)dest).put(tag, ((JSONObject) src).opt(tag));
						} else if (src instanceof JSONArray) {
							for (int i = 0; i < ((JSONArray) src).length(); i++) {
								copyNodeByTag(((JSONArray) src).opt(i), ((JSONArray) dest).opt(i), tag, last);
							}
						}
					} else {
						if (src instanceof JSONObject) {
							Object copySource = ((JSONObject) src).opt(tag);
							Object copyTarget = ((JSONObject) dest).opt(tag);
							if (copySource instanceof JSONObject) {
								if (((JSONObject) dest).isNull(tag)) {
									((JSONObject) dest).accumulate(tag, new JSONObject());
								}
							} else if (copySource instanceof JSONArray) {
								int copyLength = 0;
								if (copyTarget == null) {
									copyLength = ((JSONArray) copySource).length();
								} else if (copyTarget instanceof JSONObject) {
									copyLength = ((JSONArray) copySource).length() - 1;
								} else if (copyTarget instanceof JSONArray) {
									copyLength = ((JSONArray) copySource).length() - ((JSONArray) copyTarget).length();
								}
								for (int i = 0; i < copyLength; i++) {
									((JSONObject) dest).accumulate(tag, new JSONObject());
								}
							}
						} else if (src instanceof JSONArray) {
							for (int i = 0; i < ((JSONArray) src).length(); i++) {
								copyNodeByTag(((JSONArray) src).get(i), ((JSONArray) dest).get(i), tag, last);
							}
						}
					}
				}

		删除节点：

			/**
			 * 删除指定key集合的节点元素，元素key格式为"node1.node2.node3"如:
			 *     MediaItem.Images
			 *     MediaItem.Images.name
			 * @param jsonObject
			 * @param exps
			 */
			private void deleteNodes(JSONObject jsonObject, List<String> exps) {
				Collections.sort(exps, new Comparator<String>() {
					@Override
					public int compare(String o1, String o2) {
						return o1.indexOf(".") - o2.indexOf(".");
					}
				});
				for (String realKey : exps) {
					deleteNode(jsonObject, realKey);
				}
			}

			private void deleteNode(Object node, String exp) {
				if (node == null || StringUtils.isEmpty(exp) ) {
					return;
				}
				if (exp.indexOf(".") == -1) {
					if (node instanceof JSONObject) {
						((JSONObject) node).remove(exp);
					} else if (node instanceof JSONArray) {
						for (Object object : ((JSONArray) node)) {
							deleteNode(object, exp);
						}
					}
				} else {
					String currentKey = exp.substring(0, exp.indexOf("."));
					String remainKey = exp.substring(exp.indexOf(".") + 1);
					if (node instanceof JSONObject) {
						deleteNode(((JSONObject) node).get(currentKey), remainKey);
					} else if (node instanceof JSONArray) {
						for (Object object : ((JSONArray) node)) {
							if (object instanceof JSONObject) {
								deleteNode(((JSONObject) object).get(currentKey), remainKey);
							} else if (object instanceof JSONArray) {
								deleteNode(object, exp);
							}
						}
					}
				}
			}
	
	使用方法：

			@Test
			public void test() {
				try {
					String xml = new String(Files.readAllBytes(xmlPath));
					System.out.println(xml);
					JSONObject jsonObject = XML.toJSONObject(xml);

					jsonObject = filterNodes(jsonObject, keepNodes);
					deleteNodes(jsonObject, deleteNodes);

					String json = jsonObject.toString();
					System.out.println(json);

					JsonNode jsonNode = new ObjectMapper().readTree(json);
					String yaml = new YAMLMapper().writeValueAsString(jsonNode);
					System.out.println(yaml);
					Files.write(yamlPath, yaml.getBytes());
				} catch (IOException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
