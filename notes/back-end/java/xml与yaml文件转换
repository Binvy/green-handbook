xml与yaml文件转换：

	说明： 使用jackson进行相互转换。

	url: 

		xml: https://github.com/FasterXML/jackson-dataformat-xml
		yaml: https://github.com/FasterXML/jackson-dataformats-text/tree/master/yaml

	maven: 

		    <!-- jackson dataformat -->
	        <dependency>
	            <groupId>com.fasterxml.jackson.dataformat</groupId>
	            <artifactId>jackson-dataformat-xml</artifactId>
	            <version>2.9.8</version>
	        </dependency>
	        <dependency>
	            <groupId>com.fasterxml.jackson.dataformat</groupId>
	            <artifactId>jackson-dataformat-yaml</artifactId>
	            <version>2.9.8</version>
	        </dependency>
	        <dependency>
			    <groupId>com.fasterxml.woodstox</groupId>
			    <artifactId>woodstox-core</artifactId>
			    <version>5.1.0</version>
			</dependency>

	usage:
	
		pojo: MediaItem.java

				package com.binvi.springboot.demo03.book.javase.oxm;

				import java.util.ArrayList;
				import java.util.Arrays;
				import java.util.List;

				/**
				 * @author binvi
				 * @version 1.0
				 * @Description:
				 * @date 2020/6/29 22:43
				 */
				public class MediaItem {

					private MediaContent _content;
					private List<Image> _images;

					public MediaItem() { }

					public MediaItem(MediaContent c) {
						_content = c;
					}

					public void addPhoto(Image p) {
						if (_images == null) {
							_images = new ArrayList<Image>();
						}
						_images.add(p);
					}

					public List<Image> getImages() { return _images; }
					public void setImages(List<Image> p) { _images = p; }

					public MediaContent getContent() { return _content; }
					public void setContent(MediaContent c) { _content = c; }

					static class MediaContent
					{
						public enum Player { JAVA, FLASH;  }

						private Player _player;
						private String _uri;
						private String _title;
						private int _width;
						private int _height;
						private String _format;
						private long _duration;
						private long _size;
						private int _bitrate;
						private List<String> _persons;
						private String _copyright;

						public MediaContent() { }

						protected MediaContent(MediaContent src) {
							_player = src._player;
							_uri = src._uri;
							_title = src._title;
							_width = src._width;
							_height = src._height;
							_format = src._format;
							_duration = src._duration;
							_size = src._size;
							_bitrate = src._bitrate;
							_persons = src._persons;
							_copyright = src._copyright;
						}

						public void addPerson(String p) {
							if (_persons == null) {
								_persons = new ArrayList<String>();
							}
							_persons.add(p);
						}

						public Player getPlayer() { return _player; }
						public String getUri() { return _uri; }
						public String getTitle() { return _title; }
						public int getWidth() { return _width; }
						public int getHeight() { return _height; }
						public String getFormat() { return _format; }
						public long getDuration() { return _duration; }
						public long getSize() { return _size; }
						public int getBitrate() { return _bitrate; }
						public List<String> getPersons() { return _persons; }
						public String getCopyright() { return _copyright; }

						public void setPlayer(Player p) { _player = p; }
						public void setUri(String u) {  _uri = u; }
						public void setTitle(String t) {  _title = t; }
						public void setWidth(int w) {  _width = w; }
						public void setHeight(int h) {  _height = h; }
						public void setFormat(String f) {  _format = f;  }
						public void setDuration(long d) {  _duration = d; }
						public void setSize(long s) {  _size = s; }
						public void setBitrate(int b) {  _bitrate = b; }
						public void setPersons(List<String> p) {  _persons = p; }
						public void setCopyright(String c) {  _copyright = c; }
					}

					static class Image
					{
						private String _uri;
						private String _title;
						private int _width;
						private int _height;
						private Size _size;

						public Image() {}
						public Image(String uri, String title, int w, int h, Size s)
						{
							_uri = uri;
							_title = title;
							_width = w;
							_height = h;
							_size = s;
						}

						public String getUri() { return _uri; }
						public String getTitle() { return _title; }
						public int getWidth() { return _width; }
						public int getHeight() { return _height; }
						public Size getSize() { return _size; }

						public void setUri(String u) { _uri = u; }
						public void setTitle(String t) { _title = t; }
						public void setWidth(int w) { _width = w; }
						public void setHeight(int h) { _height = h; }
						public void setSize(Size s) { _size = s; }
					}

					enum Size { SMALL, LARGE; }

					static MediaItem getTempRecord() {
						MediaItem mediaItem = new MediaItem();

						MediaContent mediaContent = new MediaContent();
						mediaContent.setUri("http://javaone.com/keynote.mpg");
						mediaContent.setTitle("Javaone Keynote");
						mediaContent.setWidth(640);
						mediaContent.setHeight(480);
						mediaContent.setFormat("video/mpg4");
						mediaContent.setDuration(18000000);
						mediaContent.setSize(58982400);
						mediaContent.setBitrate(262144);
						mediaContent.setPersons(Arrays.asList("ill Gates", "Steve Jobs"));
						mediaContent.setCopyright("None");

						Image image1 = new Image();
						image1.setUri("http://javaone.com/keynote_large.jpg");
						image1.setTitle("Javaone Keynote");
						image1.setWidth(1024);
						image1.setHeight(768);
						image1.setSize(Size.LARGE);

						Image image2 = new Image();
						image2.setUri("http://javaone.com/keynote_small.jpg");
						image2.setTitle("Javaone Keynote");
						image2.setWidth(320);
						image2.setHeight(240);
						image2.setSize(Size.SMALL);

						mediaItem.setContent(mediaContent);
						mediaItem.setImages(Arrays.asList(image1, image2));
						return mediaItem;
					}

					String YAML =
							"---\n"
									+"content:\n"
									+"  uri: 'http://javaone.com/keynote.mpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 640\n"
									+"  height: 480\n"
									+"  format: 'video/mpg4'\n"
									+"  duration: 18000000\n"
									+"  size: 58982400\n"
									+"  bitrate: 262144\n"
									+"  persons:\n"
									+"  - 'Bill Gates'\n"
									+"  - 'Steve Jobs'\n"
									+"  player: 'JAVA'\n"
									+"  copyright: 'None'\n"
									+"images:\n"
									+"- uri: 'http://javaone.com/keynote_large.jpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 1024\n"
									+"  height: 768\n"
									+"  size: 'LARGE'\n"
									+"- uri: 'http://javaone.com/keynote_small.jpg'\n"
									+"  title: 'Javaone Keynote'\n"
									+"  width: 320\n"
									+"  height: 240\n"
									+"  size: 'SMALL'\n";

				}
		
		converter: XmlToYamlConverter.java

			package com.binvi.springboot.demo03.book.javase.oxm;

			import java.io.BufferedReader;
			import java.io.BufferedWriter;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.util.List;

			import com.fasterxml.jackson.dataformat.xml.XmlMapper;
			import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;

			/**
			 * @author binvi
			 * @version 1.0
			 * @Description:
			 * @date 2020/6/29 22:11
			 */
			public class XmlToYamlConverter {

				private static final Logger logger = LoggerFactory.getLogger(XmlToYamlConverter.class);

				private static final XmlMapper xmlMapper = new XmlMapper();
				private static final YAMLMapper yamlMapper = new YAMLMapper();

				private static String oxmDir = "src/main/resources/file";
				private static String xmlFile = "test.xml";
				private static String yamlFile = "test.yaml";

				Path xmlPath = Paths.get(oxmDir, xmlFile);
				Path yamlPath = Paths.get(oxmDir, yamlFile);

				public void convertBeanToXml() {
					try (BufferedWriter writer = Files.newBufferedWriter(xmlPath)) {
						MediaItem tempRecord = MediaItem.getTempRecord();
						xmlMapper.writeValue(writer, tempRecord);
						List<String> xmlLines = Files.readAllLines(xmlPath);
						logger.info("convert bean to xml end. result xml: {}", xmlLines);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertXmlToBean() {
					try (BufferedReader reader = Files.newBufferedReader(xmlPath)) {
						MediaItem mediaItem = xmlMapper.readValue(reader, MediaItem.class);
						logger.info("convert xml to bean end. result bean: {}", mediaItem);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertBeanToYaml() {
					try (BufferedWriter writer = Files.newBufferedWriter(yamlPath)) {
						yamlMapper.writeValue(writer, MediaItem.getTempRecord());
						List<String> yamlLines = Files.readAllLines(yamlPath);
						logger.info("convert bean to yaml end. result yaml: {}", yamlLines);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertYamlToBean() {
					try (BufferedReader reader = Files.newBufferedReader(yamlPath)) {
						MediaItem mediaItem = yamlMapper.readValue(reader, MediaItem.class);
						logger.info("convert yaml to bean end. result bean: {}", mediaItem);
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertXmlToYaml() {
					try (BufferedReader xmlReader = Files.newBufferedReader(xmlPath);
						 BufferedWriter yamlWriter = Files.newBufferedWriter(yamlPath)) {
						logger.info("read json from xml start. xml: {}", Files.readAllLines(xmlPath));
						Object json = xmlMapper.readValue(xmlReader, Object.class);
						yamlMapper.writeValue(yamlWriter, json);
						logger.info("write json to yaml end. yaml: {}", Files.readAllLines(yamlPath));
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

				public void convertYamlToXml() {
					try (BufferedReader yamlReader = Files.newBufferedReader(yamlPath);
						 BufferedWriter xmlWriter = Files.newBufferedWriter(xmlPath)) {
						logger.info("read json from yaml start. yaml: {}", Files.readAllLines(yamlPath));
						Object json = yamlMapper.readValue(yamlReader, Object.class);
						xmlMapper.writeValue(xmlWriter, json);
						logger.info("write json to yaml end. yaml: {}", Files.readAllLines(xmlPath));
					} catch (IOException e) {
						logger.error(e.getMessage(), e);
					}
				}

			}

		test: XmlToYamlConverterTest.java
		
			package com.binvi.springboot.demo03.book.javase.oxm;

			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;

			import static org.junit.Assert.*;

			public class XmlToYamlConverterTest {

				private XmlToYamlConverter converter = new XmlToYamlConverter();

				@Before
				public void setUp() throws Exception {
				}

				@After
				public void tearDown() throws Exception {
				}

				@Test
				public void convertBeanToXml() {
					converter.convertBeanToXml();
				}

				@Test
				public void convertXmlToBean() {
					converter.convertXmlToBean();
				}

				@Test
				public void convertBeanToYaml() {
					converter.convertBeanToYaml();
				}

				@Test
				public void convertYamlToBean() {
					converter.convertYamlToBean();
				}

				@Test
				public void convertXmlToYaml() {
					converter.convertXmlToYaml();
				}

				@Test
				public void convertYamlToXml() {
					converter.convertYamlToXml();
				}
			}	


	test.xml:			

		<MediaItem>
			<Content>
				<Size>58982400</Size>
				<Format>video/mpg4</Format>
				<Copyright>None</Copyright>
				<Bitrate>262144</Bitrate>
				<Width>640</Width>
				<Height>480</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote.mpg</Uri>
				<Duration>18000000</Duration>
				<Persons>ill Gates</Persons>
				<Persons>Steve Jobs</Persons>
			</Content>
			<Images>
				<Size>LARGE</Size>
				<Width>1024</Width>
				<Height>768</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote_large.jpg</Uri>
			</Images>
			<Images>
				<Size>SMALL</Size>
				<Width>320</Width>
				<Height>240</Height>
				<Title>Javaone Keynote</Title>
				<Uri>http://javaone.com/keynote_small.jpg</Uri>
			</Images>
		</MediaItem>

	test.yaml:
	
		---
		Content:
		  Size: "58982400"
		  Format: "video/mpg4"
		  Persons: "Steve Jobs"
		  Uri: "http://javaone.com/keynote.mpg"
		  Bitrate: "262144"
		  Copyright: "None"
		  Height: "480"
		  Title: "Javaone Keynote"
		  Duration: "18000000"
		  Width: "640"
		Images:
		  Size: "SMALL"
		  Uri: "http://javaone.com/keynote_small.jpg"
		  Height: "240"
		  Title: "Javaone Keynote"
		  Width: "320"
	
