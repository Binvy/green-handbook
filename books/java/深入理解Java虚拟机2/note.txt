《深入理解Java虚拟机————JVM高级特性与最佳实践》

// 2019-8-4 11:22:02 start

第1部分 走进java

	第1章 走进java

		1.1 概述

		1.2 java技术体系

		1.3 java发展史

		1.4 java虚拟机发展史

		1.5 展望java技术的未来

		1.6 实战：自己编译jdk

		1.7 本章小结

第2部分 自动内存管理机制										// start 2019-9-9 20:58:25

	第2章 Java内存区域与内存溢出异常

		2.1 概述												// done 2019-9-9 21:00:27

		2.2 运行时数据区域									

							            运行时数据区
			 ______________________________________________________________________				
			|	_________________    ________________     _____________________   |
			|  |      方法区     |   |   虚拟机栈     |    |    本地方法栈       |  |
			|  |   Method Area   |  |   VM Stack     |   | Native Method Stack |  |
			|  |_________________|	|________________|	 |_____________________|  |	
			|  _________________     __________________________________________   |
			|  |       堆       |   |               程序计数器                  |  |
			|  |      Heap      |   |           Program Counter Register       |  |
			|  |________________|   |__________________________________________|  |
			|_____________________________________________________________________|
			|         ↓  ↑                     ↓  ↑                               |
			|  _______↓__↑______      _________↓__↑__________                     |
			|  |               |     |                       |                    |
			|  |    执行引擎    |___\ |       本地库接口       |________\本地方法库  |
			|  |_______________|   / |_______________________|        /           |
			|_____________________________________________________________________|	

			2.2.1 程序计数器

				可以看做是当前线程执行的字节码的行号指示器

			2.2.2 Java虚拟机栈

				描述的是Java方法执行的内存模型：
					每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。
					每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。

				如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。
				如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。

			2.2.3 本地方法栈

				虚拟机栈：为虚拟机执行java方法（字节码）服务
				本地方法栈：为虚拟机使用到的Native方法服务

			2.2.4 堆

				唯一目的：存放对象实例，几乎所有的对象实例都在这里分配内存。

				Java堆式垃圾收集器管理的主要区域，因此很多时候也被称作“GC堆”。

			2.2.5 方法区

				各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。

			2.2.6 运行时常量池

				方法区的一部分，用于存放编译期生成的各种字面量和符号引用。

			2.2.7 直接内存									// done 2019-9-9 21:43:03								

		2.3 HotSpot虚拟机对象探秘

			2.3.1 对象的创建

				虚拟机遇到一条new命令时：

					1. 首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号应用代表的类是否已被加载、解析和初始化过。

						如果没有：那必须先执行响应的类加载过程。

					2. 在类加载检查通过后，接下来虚拟机将为新生对象分配内存。

						假设Java堆中内存是规整的，则使用“指针碰撞”的分配方式。

						假设Java堆中内存不是规整的，则使用“空闲列表”的分配方法。

					3. 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）	

					4. 接下来，虚拟机要对对象进行必要的设置，如：对象属于哪个类、如果找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。

					都完成之后：

						虚拟机的视角：一个新的对象已经产生了。

						Java程序视角：对象创建才刚刚开始————<init>方法还没有执行，所有的字段都还为零。

					5. 执行<init>方法，将对象进行初始化，这样一个真正的对象才算完成。

			2.3.2 对象的内存布局

				HotSpot虚拟中中，对象在内存中存储的布局可以分为3块区域：

					1. 对象头（Header）

						第一部分： 存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等

						第二部分： 类型指针，即对象指向它的类元数据的指针。

					2. 实例数据（Instance Data）

						对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容。

					3. 对其填充（Padding）

						不是必然存在的，也没有特别的含义，仅仅起着占位符的作用。

			2.3.3 对象的访问定位								// done 2019-9-9 21:53:54

				主流的访问方式有两种，分别是：

					1. 使用句柄

						Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的地址信息。

						优点： reference中存储的是稳定的句柄地址，对象被移动时只会改变句柄中的实例数据指针，reference本身不需要修改。

					2. 直接指针

						Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。

						优点： 速度更快，节省了一次指针定位的时间开销。

		2.4 实战：OutOfMemoryError异常
		
			2.4.1 Java堆溢出

			2.4.2 虚拟机栈和本地方法栈溢出

			2.4.3 方法区和运行时常量池溢出

			2.4.4 本机直接内存溢出							// done 2019-9-9 22:06:37

		2.5 本章小结											// done 2019-9-9 22:06:51

															// nothing but lol 2019-9-10 23:38:23

	第3章 垃圾收集器与内存分配策略								// done 2019-9-13 10:31:49

		3.1 概述

		3.2 对象已死吗

			3.2.1 引用计数算法

			3.2.2 可达性分析算法

			3.2.3 再谈引用

			3.2.4 生存还是死亡

			3.2.5 回收方法区

		3.3 垃圾收集算法

			3.3.1 标记-清除算法

			3.3.2 复制算法

			3.3.3 标记-整理算法

			3.3.4 分代收集算法

		3.4 Hotspot的算法实现

			3.4.1 枚举根节点

			3.4.2 安全点

			3.4.3 安全区域

		3.5 垃圾收集器

			3.5.1 Serial收集器

			3.5.2 ParNew收集器

			3.5.3 Parallel Scavenge收集器

			3.5.4 Serial Old收集器

			3.5.6 CMS（Concurrent Mark Sweep）收集器

			3.5.7 G1（Garbage-First）收集器

			3.5.8 理解GC日志

			3.5.9 垃圾收集器参数总结

		3.6 对象分配和回收策略

			3.6.1 对象优先在Eden分配

			3.6.2 大对象直接进入老年代

			3.6.3 长期存活的对象将进入老年代

			3.6.4 动态对象年龄判定

			3.6.5 空间分配担保

		3.7 本章小结									// done 2019-9-13 11:44:40			

	第4章 虚拟机性能监控与故障处理工具					// done 2019-9-14 12:03:41

		4.1 概述

		4.2 jdk的命令行工具

			4.2.1 jps: 虚拟机进程工具

			4.2.2 jstat: 虚拟机统计信息监视工具

			4.2.3 jinfo: java配置信息工具

			4.2.4 jmap: java内存映像工具

			4.2.5 jhat: 虚拟机堆转储快照分析工具

			4.2.6 jstack: java堆栈跟踪工具

			4.2.7 hsdis: jit生成代码反汇编

		4.3 jdk的可视化工具

			4.3.1 jconsole: java监视与管理控制台

			4.3.2 jvisualvm: 多合一故障处理工具

		4.4 本章小结									// done 2019-9-14 12:04:26

	第5章 调优案例分析与实战							// done 2019-9-15 10:38:51

		5.1 概述

		5.2 案例分析

			5.2.1 高性能硬件上的程序部署策略

			5.2.2 集群间同步导致的内存溢出

			5.2.3 堆外内存导致的溢出错误

			5.2.4 外部命令导致系统缓慢

			5.2.5 服务器jvm进程崩溃

			5.2.6 不恰当数据结构导致内存占用过大

			5.2.7 由Windows虚拟内存导致的长时间停顿

		5.3 实战：Eclipse运行速度调优

			5.3.1 调优前的程序运行状态

			5.3.2 升级jdk1.6的性能变化及兼容问题

			5.3.3 编译时间和类加载时间的优化

			5.3.4 调整内存设置控制垃圾收集频率 

			5.3.5 选择收集器降低延迟

				Eclipse.ini配置++

					-Xverify:none 							// 禁止掉字节码验证过程
					-Xmx512m 								// Java堆容量默认值
					-Xms512m 								// Java堆最大容量
					-Xmn128m 								// Java新生代容量默认值
					-XX:PermSize=96m 						// 永久代容量默认值
					-XX:MaxPermSize=96m 					// 永久代最大容量
					-XX:+DisableExplicitGC 					// 屏蔽System.gc()
					-Xnoclassgc 							// 关闭虚拟机对class的垃圾回收功能
					-XX:+UseParNewGC 						// 默认的新生代收集器
					-XX:+UseConcMarkSweepGC 				// 默认使用CMS收集器
					-XX:CMSInitiatingOccupancyFraction=85 	// CMS垃圾收集器，当老年代达到85%时，触发CMS垃圾回收

		5.4 本章小结

第三部分	虚拟机执行子系统								// done 2019-9-16 23:35:11

	第6章 类文件结构

		6.1 概述										// done 2019-9-16 21:26:04

		6.2 无关性的基石								// done 2019-9-16 21:26:10
		
		6.3 class类文件的结构							// done 2019-9-16 23:00:30

			ClassFile {
			    u4             magic;
			    u2             minor_version;
			    u2             major_version;
			    u2             constant_pool_count;
			    cp_info        constant_pool[constant_pool_count-1];
			    u2             access_flags;
			    u2             this_class;
			    u2             super_class;
			    u2             interfaces_count;
			    u2             interfaces[interfaces_count];
			    u2             fields_count;
			    field_info     fields[fields_count];
			    u2             methods_count;
			    method_info    methods[methods_count];
			    u2             attributes_count;
			    attribute_info attributes[attributes_count];
			}		

			6.3.1 魔数与calss文件的版本

			6.3.2 常量池

			6.3.3 访问标识

				javap -verbose TestClass

			6.3.4 类索引、父类索引和接口索引集合

			6.3.5 字段表结合

			6.3.6 方法表集合

			6.3.7 属性表集合

		6.4 字节码指令简介									// done 2019-9-16 23:32:12

			6.4.1 字节码和数据类型

			6.4.2 加载和存储指令

			6.4.3 运算指令

			6.4.4 类型转换指令

			6.4.5 对象创建和访问指令

			6.4.6 操作数栈管理指令
 
			6.4.7 控制转移指令

			6.4.8 方法调用和返回指令

			6.4.9 异常处理指令

			6.4.10 同步指令

		6.5 公有设计和私有实现								// done 2019-9-16 23:33:48

		6.6 class文件结构的发展								// done 2019-9-16 23:34:56

		6.7 本章小结											// done 2019-9-16 23:35:03

	第7章 虚拟机类加载机制 									// done 2019-9-18 00:04:22

		7.1 概述

			虚拟机的类加载机制：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。

		7.2 类加载的时机

			类从被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期包括：

				加载Loading、验证Verification、准备Preparation、解析Resolution、初始化Initialization、使用Using、卸载Unloading七个阶段。

			虚拟机规范严格规定了有且只有5种情况必须立即对类进行“初始化”：

				1. 遇到new、getstatic、putstatic和invokestatic这4个字节码指令，如果类没有进行初始化，则需要先触发初始化。

				2. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发初始化。

				3. 当初始化一个类的时候，如果发现其父类还没进行过初始化，则需要先触发其父类的初始化。

				4. 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。

				5. 当时用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，
				并且这个方法句柄所对应的类没有进行过初始化，则需要先触发初始化。

		7.3 类加载的过程

			7.3.1 加载

				在加载阶段，虚拟机需要完成以下3件事情：

					1. 通过一个类的全限定名来获取定义此类的二进制字节流

					2. 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构

					3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

				一个非数组类的加载阶段，既可以使用系统提供的引导类加载器来完成，也可以使用用户自定义的类加载器去完成。

				对于数组类而言，情况有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。
				一个数组类创建过程遵循以下规则：

					1. 如果数组的组件类型（Component Type）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将在加载该组件类型的类加载器的类名称空间上被标识。

					2. 如果数组的组件类型不是引用类型（例如int[]），Java虚拟机将会把数组C标记为与引导类加载器关联。

					3. 数组类的可见性与它的组件类型的可见性一致，如果组件类型不是引用类型，那么数组的可见性将默认为public。

			7.3.2 验证

				验证阶段大致会完成下面4个阶段的校验动作：文件格式验证、元数据验证、字节码验证、符号引用验证

			7.3.3 准备

				正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区进行分配。

			7.3.4 解析

				虚拟机将常量池内的符号引用替换为直接引用的过程。

					符号引用： 以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。

					直接引用： 可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。

			7.3.5 初始化

		7.4 类加载器

			7.4.1 类与类加载器

				对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类空间名称。

			7.4.2 双亲委派模型

				从Java虚拟机的角度来讲，存在两种不同的类加载器：

					1. 启动类加载器（Bootstrap ClassLoader），使用C++实现，是虚拟机自身的一部分。
					2. 所有其他的加载器，这些类加载器都有Java实现，独立于虚拟机外部，并且全部继承自抽象类java.lang.ClassLoader。

				从Java开发人员的角度来看，绝大部分程序都会使用以下3种系统提供的类加载器：
				
					1. 启动类加载器（Bootstrap ClassLoader）: 
							由C++语言实现，是虚拟机自身的一部分，
							负责将存放在%JAVA_HOME%\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是被虚拟机识别的类库加载到虚拟机内存中，
							无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。
							e.g:
							    public ClassLoader getClassLoader() {
							        ClassLoader cl = getClassLoader0();
							        if (cl == null)
							            return null;
							        SecurityManager sm = System.getSecurityManager();
							        if (sm != null) {
							            ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());
							        }
							        return cl;
							    }

					2. 扩展类加载器（Extension ClassLoader）: 
							由sun.misc.Launcher$ExtClassLoader实现，
							负责加载%JAVA_HOME%/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，
							开发者可以直接使用。

					3. 应用程序类加载器（Application ClassLoader）: 
							由sun.misc.Launcher$AppClassLoader实现，是ClassLoader.getSystemClassLoader()的返回值，一般也称为系统类加载器，
							负责加载用户类路径（ClassPath）上所指定的类库，
							开发者可以直接使用，如果应用程序没有自定义过自己的加载器，一般情况下这个就是程序中默认的类加载器。

				双亲委派模型：

					要求： 除了顶层的启动类加载器，其余的类加载器都应当由自己的父类加载器。

					工作过程： 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，
						因此所有的记载请求都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到要加载的类），子类加载器
						才会尝试去加载。

					实现：
						protected Class<?> loadClass(String name, boolean resolve)
					        throws ClassNotFoundException
					    {
					        synchronized (getClassLoadingLock(name)) {
					            // First, check if the class has already been loaded
					            Class<?> c = findLoadedClass(name);
					            if (c == null) {
					                long t0 = System.nanoTime();
					                try {
					                    if (parent != null) {
					                        c = parent.loadClass(name, false);
					                    } else {
					                        c = findBootstrapClassOrNull(name);
					                    }
					                } catch (ClassNotFoundException e) {
					                    // ClassNotFoundException thrown if class not found
					                    // from the non-null parent class loader
					                }

					                if (c == null) {
					                    // If still not found, then invoke findClass in order
					                    // to find the class.
					                    long t1 = System.nanoTime();
					                    c = findClass(name);

					                    // this is the defining class loader; record the stats
					                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
					                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
					                    sun.misc.PerfCounter.getFindClasses().increment();
					                }
					            }
					            if (resolve) {
					                resolveClass(c);
					            }
					            return c;
					        }
					    }	


			7.4.3 破坏双亲委派模型 

		7.5 本章小结											// done 2019-9-18 22:16:51

	第8章 虚拟机字节码执行引擎									// done 2019-9-18 23:41:18

		8.1 概述

		8.2 运行时栈帧结构									// done 2019-9-18 23:05:19

			8.2.1 局部变量表

				局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。对实际开发的影响：

					1. placeholder能否被回收的根本原因是：局部变量表中的Slot是否还存在有关于placeholder数组对象的引用。

					2. 类变量有两次赋初始值的过程（1. 准备阶段赋予系统初始值 2. 初始化阶段赋予定义的初始值），但如果一个局部变量定义了但没有赋初始值是不能使用的。

			8.2.2 操作数栈

			8.2.3 动态连接

			8.2.4 方法返回地址

			8.2.5 附加信息

		8.3 方法调用 										// done 2019-9-18 23:34:03

			8.3.1 解析

				Java虚拟机里面提供了5条调用字节码指令：

					1. invokestatic: 调用静态方法
					2. invokespecial: 调用实例构造器<init>方法、私有方法和父类方法
					3. invokevirtual: 调用所有的虚方法
					4. invokeinterface: 调用接口方法，会在运行时再确定一个实现此接口的对象
					5. invokedynamic: 现在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。

					非虚方法：静态方法、私有方法、实例构造器、父类方法
					虚方法：	除了非虚方法和final方法。

			8.3.2 分派

				1. 静态分派：依赖静态类型来定位方法执行版本的分派动作。典型应用是方法重载。

						public class StaticDispatch {

							static abstract class Human{}

							static class Man extends Human {}

							static class Woman extends Human {}

							public void sayHello(Human guy) {
								System.out.println("hello, guy");
							}

							public void sayHello(Man man) {
								System.out.println("hello, man");
							}

							public void sayHello(Woman woman) {
								System.out.println("hello, woman");
							}

							public static void main(String[] args) {
								// Human:变量的静态类型 Man:变量的实际类型
								// 虚拟机（编译器）在重载时是通过参数的静态类型而不是实际类型作为判断依据的。
								// 在编译阶段，Javac编译器会根据参数的静态类型决定使用哪个重载版本
								Human man = new Man();
								Human woman = new Woman();
								StaticDispatch staticDispatch = new StaticDispatch();
								staticDispatch.sayHello(man);
								staticDispatch.sayHello(woman);
							}

						}

				2. 动态分派：运行期根据实际类型确定方法执行版本的分派过程。典型应用是方法重写。

						public class DynamicDispatch {

							static abstract class Human {
								protected abstract void sayHello();
							}

							static class Man extends Human {
								@Override
								protected void sayHello() {
									System.out.println("man say hello");
								}
							}

							static class Woman extends Human {
								@Override
								protected void sayHello() {
									System.out.println("woman say hello");
								}
							}

							public static void main(String[] args) {
								Human man = new Man();
								Human woman = new Woman();
								man.sayHello();
								woman.sayHello();
								man = new Woman();
								man.sayHello();
							}

						}

				3. 单分派和多分派：

					宗量：方法的接收者和方法的参数的统称。

					单分派：根据一个宗量对目标方法进行选择。

					多分派：根据多于一个宗量对目标方法进行选择。

						public class Dispatch {

							static class QQ {}

							static class _360 {}

							public static class Father {
								public void hardChoice(QQ arg) {
									System.out.println("father choose QQ");
								}

								public void hardChoice(_360 arg) {
									System.out.println("father choose 360");
								}
							}

							public static class Son extends Father {
								public void hardChoice(QQ arg) {
									System.out.println("son choose QQ");
								}

								public void hardChoice(_360 arg) {
									System.out.println("son choose 360");
								}
							}

							public static void main(String[] args) {
								Father father = new Father();
								Father son = new Son();
								father.hardChoice(new _360());
								son.hardChoice(new QQ());
							}

						}

				4. 虚拟机动态分派的实现		

			8.3.3 动态类语言支持

				1. 动态类型语言

				2. JDK1.7与动态类型

				3. java.lang.invoke包

					public class MethodHandleTest {

						static class ClassA {
							public void println(String s) {
								System.out.println(s + " from classA");
							}
						}

						public static void main(String[] args) throws Throwable {
							Object obj = System.currentTimeMillis() % 2 == 0 ? System.out : new ClassA();
							getPrintInMH(obj).invokeExact("hello world");
						}

						private static MethodHandle getPrintInMH(Object reveiver) throws Throwable {
							MethodType methodType = MethodType.methodType(void.class, String.class);
							return MethodHandles.lookup() // 在指定类中查找符合给定的方法名称、方法类型、并且符合调用权限的方法句柄
									.findVirtual(reveiver.getClass(), "println", methodType)
									.bindTo(reveiver);
						}

					}

				4. invokedynamic指令
				
					public class InvokeDynamicTest {

						public static void main(String[] args) throws Throwable {
							INDY_BootstrapMethod().invokeExact("binvi han");
						}

						public static void testMethod(String s) {
							System.out.println("hello String: " + s);
						}

						public static CallSite BootstrapMethod(MethodHandles.Lookup lookup, String name, MethodType mt) throws Throwable {
							return new ConstantCallSite(lookup.findStatic(InvokeDynamicTest.class, name, mt));
						}

						private static MethodType MT_BootstrapMethod() {
							return MethodType.fromMethodDescriptorString("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", null);
						}

						private static MethodHandle MH_BootstrapMethod() throws Throwable {
							return lookup().findStatic(InvokeDynamicTest.class, "BootstrapMethod", MT_BootstrapMethod());
						}

						private static MethodHandle INDY_BootstrapMethod() throws Throwable {
							CallSite callSite = (CallSite) MH_BootstrapMethod().invokeWithArguments(lookup(), "testMethod", MethodType.fromMethodDescriptorString("(Ljava/lang/String;)V", null));
							return callSite.dynamicInvoker();
						}

					}	

				5. 掌控方法分派规则	


		8.4 基于栈的字节码解释执行引擎							// done 2019-9-18 23:41:10						

			8.4.1 解释执行

			8.4.2 基于栈的指令集与基于寄存器的指令集

			8.4.3 基于栈的解释器执行过程

		8.5 本章小结

	第9章 类加载及执行子系统的案例和实战						// done 2019-9-19 23:46:33

		9.1 概述

		9.2 案例分析

			9.2.1 tomcat:正统的类加载架构

			9.2.2 osgi:灵活的类加载架构

			9.2.3 字节码生成技术与动态代理的实现

			9.2.4 retrotranslator:跨域jdk版本

		9.3 实战：自己动手实现远程执行功能

			9.3.1 目标

			9.3.2 思路

			9.3.3 实现

			9.3.4 验证

		9.4 本章小结											// done 2019-9-21 11:16:53

第四部分 程序编译和代码优化

	第10章 早期（编译器）优化

		10.1 概述

		10.2 javac编译器

			10.2.1 javac的源码与调试

			10.2.2 解析与填充符号表

			10.2.3 注解处理器

			10.2.4 语义分析与字节码生成

		10.3 java语法糖的味道

			10.3.1 泛型与类型擦除

			10.3.2 自动装箱、拆箱与遍历循环

			10.3.3 条件编译

		10.4 实战：插入式注解处理器

			10.4.1 实战目标

			10.4.2 代码实现

			10.4.3 运行与测试

			10.4.4 其他应用案例

		10.5 本站小结

	第11章 晚期（运行期）优化

		11.1 概述

		11.2 hotspot虚拟机内的即时编译器

			11.2.1 解释器与编译器

			11.2.2 编译对象与触发条件

			11.2.3 编译过程

			11.2.4 查看及分析即时编译结果

		11.3 编译优化技术

			11.3.1 优化技术概览

			11.3.2 公共子表达式消除

			11.3.3 数组边界检查消除

			11.3.4 方法内联

			11.3.5 逃逸分析

		11.4 java与c++编译器对比

		11.5 本章小结

第五部分 高效并发		

	第12章 java内存模型与线程

		12.1 概述

		12.2 硬件的效率与一致性

		12.3 java内存模型

			12.3.1 主内存和工作内存
			
			12.3.2 内存间相互操作

			12.3.3 对于volatile型变量的特殊规则

			12.3.4 对于long和double型变量的特殊规则

			12.3.5 原子性、可见性和有序性

			12.3.6 先行发生规则

		12.4 java与线程

			12.4.1 线程的实现

			12.4.2 java线程调度

			12.4.3 状态转换

		12.5 本章小结

	第13章 线程安全和锁优化

		13.1 概述

		13.2 线程安全

			13.2.1 java语言中的线程安全

			13.2.2 线程安全的实现方法

		13.3 锁优化

			13.3.1 自旋锁和自适应自旋

			13.3.2 锁消除

			13.3.3 锁优化

			13.3.4 轻量级锁

			13.3.5 偏向锁

		13.4 本章小结	