《Effective Java 3rd》     start 2019-8-28 22:46:40

第1章 引言

第2章 创建和销毁对象

	1. 考虑使用静态工厂方法代替构造方法						// done 2019-8-28 22:48:43

	2. 党构造方法参数过多时使用builder模式						// done 2019-8-28 22:48:50

	3. 使用私有构造方法或枚举实现Singleton属性					// done 2019-8-29 20:36:07

	4. 使用私有构造方法执行非实例化							// done 2019-8-29 20:40:16

	5. 依赖注入优于硬连接资源									// done 2019-8-29 21:25:35

	6. 避免创建不必要的对象									// done 2019-8-29 21:39:22

	7. 消除过期的对象引用										// done 2019-8-29 22:42:58

	8. 避免使用Finalizer和Cleaner机制							// done 2019-8-29 22:55:20

	9. 使用try-with-resource语句替代try-finally语句			// done 2019-8-29 23:21:39

第3章 对于所有对象都通用的方法	

	10. 重写equals方法时遵守通用约定							// done 2019-8-29 23:39:09

	11. 重写equals方法时同时也要重写hashcode方法				// done 2019-8-29 23:57:37

	12. 始终重写toString方法									// done 2019-8-30 00:02:42

	13. 谨慎地重写clone方法									// done 2019-8-30 00:11:15

	14. 考虑实现Comparable接口								// done 2019-8-30 00:21:36

第4章 类和接口	

	15. 使类和成员的可访问性最小化								// done 2019-8-31 09:36:06

	16. 在公共类中使用访问方法而不是公共属性					// done 2019-8-31 09:42:44

	17. 最小化可变性											// done 2019-8-31 10:02:16

	18. 组合优于继承											// done 2019-8-31 10:25:38

	19. 要么设计继承并提供文档，要么禁止继承					// done 2019-8-31 11:14:07

	20. 接口优于抽象类										// done 2019-8-31 11:23:38

	21. 为后代设计接口										// done 2019-9-2 10:34:49

	22. 接口只用于定义类型									// done 2019-9-2 11:05:08

	23. 类层次优于标签类										// done 2019-9-2 11:11:36

	24. 静态成员类优于非静态成员类								// done 2019-9-2 11:25:44

	25. 限制源文件为单个顶级类								// done 2019-9-2 11:28:21

第5章 泛型	

	26. 请不要使用原生态类型									// done 2019-9-2 20:39:18

	27. 消除非受检的警告										// done 2019-9-3 14:07:05

	28. 列表优于数组											// done 2019-9-3 14:20:47

	29. 优先考虑泛型											// done 2019-9-3 14:27:23

	30. 优先考虑泛型方法										// done 2019-9-3 14:41:14

	31. 利用有限制通配符来提升API的灵活性						// done 2019-9-3 14:57:02

	32. 谨慎并用泛型和可变参数								// done 2019-9-3 15:11:16

	33. 优先考虑类型安全的异构容器								// done 2019-9-3 15:28:02

第6章 枚举和注解	

	34. 用enum代替int常亮									// done 2019-9-3 16:21:10

	35. 用实例域代替序数										// done 2019-9-3 16:25:22

	36. 用EnumSet代替位域									// done 2019-9-3 16:30:40

	37. 用EnumMap代替序数索引									// done 2019-9-3 16:43:02

	38. 用接口模拟可扩展的枚举								// done 2019-9-3 16:48:41

	39. 注解优于命名模式										// done 2019-9-3 16:57:10

	40. 坚持使用Override注解									// done 2019-9-3 17:00:20

	41. 用标记接口定义类型									// done 2019-9-3 17:04:44

第7章 Lambda和Stream

	42. Lambda优先于匿名类									// done 2019-9-3 20:49:37

		匿名类：

			Collections.sort(words, Comparator<String>() {
				public int compare(String s1, String s2) {
					return Integer.compare(s1.length, s2.length);
				}
			});

		Lambda:
			
			Collections.sort(words, (s1, s2) -> Integer.compare(s1.length, s2.length));

			Collections.sort(words, comparingInt(String::length));

			words.sort(comparingInt(String::length));


	43. 方法优先于lambda										// done 2019-9-3 20:59:11

			map.merge(key, 1, (count, incr) -> count + incr); == map.merge(key, 1, Integer::sum);

			service.execute(GoshThisClassNameIsHumongous::action);  == service.execute(() -> action());

			方法引用类型					范例							Lambda表达式

				静态 				Integer::parseInt			str -> Integer.parseInt(str)

				有限制				Instant.now::isAfter	 Instant then = Instant.now(); t -> then.isAfter(t);

				无限制				String::toLowerCase		 	str -> str.toLowerCase()

				类构造器				TreeMap<K,V>::new			() -> new TreeMap<K,V>()

				数组构造器			int[]::new						len -> new int[len]

	44. 坚持使用标准的函数接口								// done 2019-9-3 21:48:09
	
			基础接口						函数签名							范例							函数含义						变体（作用于int,long,double）

			UnaryOperator<T>			T apply(T t)				String::toLowerCase			结果与参数类型一致			 	  	 IntUnaryOperator..

			BinaryOperator<T>			T apply(T t1, T t2)			BigInteger::add											         IntBinaryOperator..

			Predicate<T>				boolean test(T t)			Collection::isEmpty			有一个参数并返回一个boolean结果	     BiPredicate,IntPredicate..

			Function<T, R>				R apply(T t)				Arrays::asList				参数与返回类型不一致              IntFunction,IntToDoubleFunction..

			Supplier<T>					T get()						Instant::now				没有参数并返回结果			    BooleanSupplier,IntSupplier..	

			Consumer<T>					void accept(T t)			System.out::println			有参数但不返回结果					IntConsumer..

	45. 谨慎使用Stream										// done 2019-9-3 22:40:12
	
			public class Anagrams {

				public static void main(String[] args) throws IOException {
					Path path = Paths.get(args[0]);
					int minGroupSize = Integer.parseInt(args[1]);
					try (Stream<String> words = Files.lines(path)) {
						words.collect(groupingBy(word -> alphabetize(word)))
								.values().stream()
								.filter(group -> group.size() >= minGroupSize)
								.forEach(g -> System.out.println(g.size() + " : " + g));
					}
				}

				private static String alphabetize(String word) {
					char[] a = word.toCharArray();
					Arrays.sort(a);
					return new String(a);
				}

			}

	46. 优先选择Stream中无副作用的函数							// done 2019-9-3 23:00:22
	
	47. Stream要优先用Collection作为返回类型					// done 2019-9-3 23:17:52

	48. 谨慎使用Stream并行									// done 2019-9-3 23:24:02


第8章 方法

	49. 检查参数的有效性										// done 2019-9-4 21:26:14

			throw new ArithmeticException("BigInteger: modulus not positive");

			Objects.requireNonNull(m, "m不能为空");

			assert m != null : "m should not be null"; (java的断言默认是关闭的，需要在 run configuration中的VM options:添加-ea来开启断言)
		
	50. 必要时进行防御性拷贝									// done 2019-8-29 22:31:34

	51. 谨慎设计方法签名										// done 2019-9-4 21:42:05

			谨慎地选择方法的名称

			不要过于追求提供便利的方法

			避免过长的参数列表

			对于参数类型，要优先使用接口而不是类

			对于boolean参数，要优先使用两个元素的枚举类型

	52. 慎用重载												// done 2019-9-4 21:53:34		

			安全而保守的策略是，永远不要导出两个具有相同参数数目的重载方法，并且始终给方法起不同的名称，而不使用重载机制。

				/**
				 * 1. 对于重载方法的选择是静态的
				 * 2. 对于覆盖方法的选择是动态的
				 */
				public class CollectionClassifier {

					public static String classify(Set<?> s) {
						return "Set";
					}

					public static String classify(List<?> l) {
						return "List";
					}

					public static String classify(Collection<?> c) {
						return "Unknown Collection";
					}

					/**
					 * 要选择哪个重载方法是在编译时做出决定的。
					 * 	   三次迭代，参数的编译时类型是相同的，都是Collection<?>
					 * 	   三次迭代，参数的运行时类型是不同的，但并不影响重载方法的选择。
					 * @param args
					 */
					public static void main(String[] args) {
						Collection<?>[] collection = {
							new HashSet<String>(),
								new ArrayList<BigInteger>(),
								new HashMap<String, String>().values()
						};
						for (Collection<?> c : collection) {
							System.out.println(classify(c));
						}
					}

				}


				/**
				 * 选择被覆盖的方法的正确版本是在运行时进行的，选择的依据是被调用的方法所在对象的运行时类型。
				 */
				class Wine {
					String name() { return "wine"; }
				}

				class SparklingWine extends Wine {
					@Override
					String name() {
						return "sparkling wine";
					}
				}

				class Champagne extends SparklingWine {
					@Override
					String name() {
						return "champagne";
					}
				}

				public class Overriding {
					public static void main(String[] args) {
						List<Wine> wines = Arrays.asList(new Wine(), new SparklingWine(), new Champagne());
						for (Wine wine : wines) {
							System.out.println(wine.name());
						}
					}
				}

				public class SetList {

					public static void main(String[] args) {
						Set<Integer> set = new TreeSet<>();
						List<Integer> list = new ArrayList<>();

						for (int i = -3; i < 3; i++) {
							set.add(i);
							list.add(i);
						}

						/**
						 * set.remove(i) 调用重载方法 remove(E)
						 * list.remove(i) 调用重载方法 remove(int i)，从列表的指定位置上去除元素。
						 */
						/*for (int i = 0; i < 3; i++) {
							set.remove(i);
							list.remove(i);
						}*/

						/**
						 * 解决上面的问题，可以将list.remove的参数转换为Integer
						 */
						for (int i = 0; i < 3; i++) {
							set.remove(i);
							list.remove((Integer)i);
						}

						System.out.println(set + " " + list);
					}

				}

	53. 慎用可变参数											// done 2019-9-4 22:38:24

			每次调用可变参数方法都会导致一次数组分配和初始化。如果凭经验确定无法承受这一成本，但又需要可变参数的灵活性。则可参考EnumSet：
				EnumSet.of(E e);
				EnumSet.of(E e1, E e2);
				EnumSet.of(E e1, E e2, E e3);
				EnumSet.of(E e1, E e2, E e3, E e4);
				EnumSet.of(E e1, E e2, E e3, E e4, E e5);
				EnumSet.of(E first, E... rest);
			最大限度地减少创建枚举集合的成本。	

	54. 返回零长度的数组或者集合，而不是null					// done 2019-9-4 22:50:40

			永远不要返回null，而不返回一个零长度的数组或者集合，如果返回null，会使API更难以使用，也更容易出错，而且没有任何性能优势。

			private final List<String> list = ...;

			list:

				错误做法：return list.isEmpty() ? null : new ArrayList<>(list);		

				正确做法：return new ArrayList<>(list);

				性能优化：return list.isEmpty() ? Collections.emptyList() : new ArrayList(list);

			数组：
				
				正确做法：return list.toArray(new String[0]);
				性能优化：
					private static final String[] EMPTY_STRING_ARRAY = new String[0];
					return list.toArray(EMPTY_STRING_ARRAY);
				适得其反：
					return list.toArray(new String[list.size()]);

	55. 谨慎返回optinal										// done 2019-9-4 23:09:43

	56. 为所有导出的API元素编写文档注释						// done 2019-9-4 23:48:49


第9章 通用编程

	57. 将局部变量的作用域最小化								// done 2019-9-5 19:58:29

			增强for循环： for (Element e : elements)

			迭代器for循环： for (Iterator i = elements.iterator(); i.hasNext();)  {}

			while循环： Iterator i = elements.iterator();  while (i.hasNextt()) {}

			传统for循环： for (int i = 0, n = elements.size(); i < n; i++) {}

	58. for-each循环优于传统的for循环							// done 2019-9-5 22:51:17

			三种情况无法使用for-each循环：

				1. 解构过滤：如果需要遍历集合，并删除选定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法
				2. 转换：如果需要遍历列表或者数组，并取代它的部分或者全部元素值，就需要列表迭代器或者数组索引，以便设定元素的值
				3. 平行迭代：如果需要并行地遍历多个集合，就需要显示地控制索引变量，以便所有迭代器和索引变量都可以同步前进。

	59. 了解和使用类库										// done 2019-9-5 23:14:34

	60. 如果需要精确的答案，请避免使用float和double			// done 2019-9-5 23:26:10

	61. 基本类型优先于装箱基本类型								// done 2019-9-5 23:32:27

	62. 如果其他类型更适合，则尽量避免使用字符串				// done 2019-9-5 23:37:54

	63. 了解字符串连接的性能									// done 2019-9-5 23:40:23

	64. 通过接口引用对象										// done 2019-9-5 23:44:22

	65. 接口优先于反射机制									// done 2019-9-5 23:51:48

	66. 谨慎地使用本地方法									// done 2019-9-5 23:54:04

	67. 谨慎地进行优化										// done 2019-9-5 23:58:58

	68. 遵守普遍接受的命名惯例								// done 2019-9-6 00:04:20

第10章 异常

	69. 只针对异常的情况下才使用异常							// done 2019-8-28 22:58:18

	70. 对可恢复的情况使用受检异常，对编程错误使用运行时异常		// done 2019-8-28 23:06:24

	71. 避免不必要的使用受检异常								// done 2019-8-28 23:12:50

	72. 优先使用标准的异常									// done 2019-8-28 23:19:40

	73. 抛出与抽象对应的异常									// done 2019-8-28 23:42:10
		
	74. 每个方法抛出的异常都需要创建文档						// done 2019-8-28 23:42:13

	75. 在细节消息中包含失败-捕获信息							// done 2019-8-28 23:42:42

	76. 保持失败原子性										// done 2019-8-28 23:43:00
		
	77. 不要忽略异常											// done 2019-8-28 23:43:15

第11章 并发

第12章 序列化	

