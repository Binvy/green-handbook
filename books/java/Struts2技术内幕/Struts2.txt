
 
《Struts2技术内幕---深入解析Struts架构设计与实现原理》		// 2019-7-25 22:54:25 start

	第一部分 知识准备篇

		第1章 厉兵秣马--开发环境准备		:P3

			1.1 准备源代码阅读环境

				1.1.1 安装与配置JDK

				1.1.2 安装Eclipse与源码调试

				1.1.3 安装与配置Web服务器

				1.1.4 在Eclipse中使用Jetty搭建Web开发环境

			1.2 获取Struts2

				1.2.1 Struts2的相关资料下载

				1.2.2 Struts2项目的目录组织结构

			1.3 Struts2源码的初步研究

				1.3.1 源码的组织形式

				1.3.2 调试Struts源码

			1.4 小结

		第2张 固本清源--Web开发浅谈		:P20			// 2019-7-26 00:33:51

			2.1 面向对象浅谈

				2.1.1 对象构成模型

				2.1.2 对象关系模型

				2.1.3 面向对象编程的基本观点

			2.2 框架的本质

			2.3 最佳实践

			2.4 Web开发的基本模式

				2.4.1 分层开发模式

				2.4.2 MVC模式

			2.5 表示层的困惑

			2.6 如何学习开源框架

			2.7 小结 
	
		第3章 提纲挈领--Struts概览 		:P50			// 2019-7-26 23:55:36

			3.1 Struts2的前世今生

			3.2 Struts2面面观

				3.2.1 Struts2的运行环境

				3.2.2 Struts2的应用场景

				3.2.3 Struts2的核心技术

			3.3 多视角透视Struts2

				3.3.1 透视镜————Struts2的宏观视图

				3.3.2 显微镜————Struts2的微观元素

			3.4 Struts2的配置元素

				3.4.1 Struts2配置详解

				3.4.2 Struts2配置元素定义

				3.4.3 Struts2配置元素的分类

			3.5 小结

	第二部分 核心技术篇	

		第4章 源头活水--Struts2中的设计模式	:P75

			4.1 ThreadLocal模式

				4.1.1 线程安全问题的由来

				4.1.2 ThreadLocal模式的实现机理

				4.1.3 ThreadLocal模式的应用场景

				4.1.4 ThreadLocal模式的核心元素

			4.2 装饰模式（Decorator）

				4.2.1 装饰模式的定义
				
				4.2.2 装饰模式的构成要素

				4.2.1 装饰模式的应用案例

			4.3 策略模式（Strategy）

				4.3.1 策略模式的定义

				4.3.2 策略模式的应用场景

				4.3.3 策略模式的深入思考

			4.4 构造模式（Builder）

				4.4.1 构造模式的核心要素

				4.4.2 构造模式的应用场景

				4.4.1 对象构造步骤

			4.5 责任链模式（Chain of Responsibility）		// 2019-7-28 00:41:14

				4.5.1 责任链模式的定义

				4.5.2 责任链模式的逻辑意义

		第5章 生命之源--XWork中的容器		:P105

			5.1 容器，对象生命周期管理的基石

				5.1.1 对象的生命周期管理

				5.1.2 容器（Container）的引用

				5.1.3 容器（Container），不是容器（Collection）

			5.2 XWork容器概览							// 2019-7-28 12:12:36

				5.2.1 XWork容器的意义

				5.2.2 XWork容器的管辖范围

				5.2.3 XWork容器操作详解

			5.3 深入浅出XWork容器		

				5.3.1 XWork容器的存储结构

				5.3.2 XWork容器的实现机理

			5.4 统一的容器操作接口————ObjecctFactory		// 2019-7-28 15:37:25 end

		第6章 灵丹妙药--OGNL,数据流转的催化剂		:P136

			6.1 架起数据沟通的桥梁————表达式引擎

				6.1.1 数据流转的困境

				6.1.2 数据访问的困境

				6.1.3 表达式引擎

			6.2 强大的OGNL								// 2019-7-28 23:12:12 end

				6.2.1 深入OGNL的API

				6.2.2 OGNL三要素

				6.2.3 OGNL的基本操作

				6.2.4 深入this之神

				6.2.5 有关#符号的三种用途

			6.3 深入OGNL内部

				6.3.1 深入OgnlContext

				6.3.2 深入OGNL的计算规则

				6.3.3 深入OGNL的扩展方式

			6.4 小结										// 2019-7-29 00:43:54 end

		第7章 别具匠心--XWork设计原理		:P175

			7.1 请求——响应的哲学

				7.1.1 请求 —— 响应的基本概念

				7.1.2 请求 —— 响应的实现模式

				7.1.3 分歧与职责

			7.2 数据流和控制流

				7.2.1 再谈MVC

				7.2.2 数据载体的战争

				7.2.3 控制流的细节

			7.3 XWork概览

				7.3.1 XWork的宏观视图

				7.3.2 XWork的微观视图

			7.4 小结										// 2019-7-31 00:24:58 end

		第8章 庖丁解牛--XWork元素详解		:P200		

			8.1 深入XWork宏观视图							// 2019-7-31 00:53:02 end

				8.1.1 数据流体系

				8.1.2 控制流体系

			8.2 数据流体系————相互依存					

				8.2.1 ActionContext————一个平行世界

				8.2.2 ValueStack————对OGNL的扩展

				8.2.3 深入ValueStack的实现

				8.2.4 形影不离、相互依存的ActionContext与ValueStack

			8.3 控制流体系————有条不紊

				8.3.1 Action————革命性突破

				8.3.2 Inteceptor————腾飞的翅膀

				8.3.3 ActionInvocation————核心调度

				8.3.4 ActionProxy————执行窗口

			8.4 交互体系————水乳交融

				8.4.1 数据环境的生命周期

				8.4.2 三军会师之地

				8.4.3 Action交互体系

			8.5 小结										// 2019-8-1 00:42:58 end

	第三部分 运行主线篇

		第9章 包罗万象--Struts2初始化主线		:P273

			9.1 配置元素和初始化主线

				9.1.1 从入口程序开始

				9.1.2 初始化主线的核心驱动力

				9.1.3 初始化主线的构成元素

			9.2 和新分发器————Dispatcher

				9.2.1 核心分发器的核心驱动作用

				9.2.2 核心分发器的数据结构

			9.3 配置元素的加载器

				9.3.1 配置元素加载器的作用

				9.3.2 容器加载器————ContainerProvider

				9.3.3 事件映射加载器————PackageProvider

			9.4 配置元素的构造器（Builder）

				9.4.1 容器构造器————ContainerBuilder

				9.4.2 事件映射构造器————PackageConfig.Builder

			9.5 配置元素的管理类

				9.5.1 配置管理元素————Configuration

				9.5.2 配置操作接口————ConfigurationManager

			9.6 Struts2初始化主线详解

				9.6.1 核心分发器的初始化

					9.6.1.1 步骤1————创建ConfigurationManager

					9.6.1.2 步骤2————初始化各种配置加载器

					9.6.1.3 步骤3————初始化容器

					9.6.1.4 步骤4————执行额外的初始化工作

				9.6.2 容器的初始化

					9.6.2.1 步骤1————定义容器构造器

					9.6.2.2 步骤2————使用ContainerBuilder进行参数收集

					9.6.2.3 步骤3————使用ContainerBuilder进行容器创建

					9.6.2.4 步骤4————初始化事件映射元素PackageConfig

					9.6.2.5 步骤5————对PackageConfig进行运行期改造

			9.7 小结											// 2019-8-2 00:10:34

		第10章 井然有序--与Http请求的战斗		:P314

			10.1 制定作战计划

				10.1.1 战斗资源

					OGNL————表达式引擎，架起外部世界与Java世界沟通的桥梁

					XWork————请求处理器，将请求分为若干处理步骤并分派到不同处理元素调度执行

				10.1.2 战斗进程

					第一战场：（Struts）

						StrutPrepareAndExecuteFilter.doFilter() -> ExecuteOperations.executeAction() -> Dispatcher.serviceAction 

					第二战场：（XWork）

					    -> ActionProxy.execute() -> ActionInvocation.invoke() -> Interceptor.intecept() -> ActionInvocation.invokeActoin() 
					    -> Action.actionMethod() -> ActionInvocation.executeRequest()-> Result.execute()

			10.2 第一战场————Http请求的预处理阶段

				10.2.1 三探入口程序

				10.2.2 Http请求预处理类————PrepareOperations

					10.2.2.1 步骤1————设置Encoding和Locale
					10.2.2.2 步骤2————创建ActionContext
					10.2.2.3 步骤3————将核心分发器Dispatcher绑定到当前线程
					10.2.2.4 步骤4————对HttpServletRequest进行一定的封装
					10.2.2.5 步骤5————根据Http请求查找ActionMapping

				10.2.3 Http请求执行类————ExecuteOperations

					关于核心分发器Dispatcher的三个重要结论：

						(1). XWork框架的相关逻辑实际上由Dispatcher创建并负责驱动执行
						(2). Dispatcher负责Http请求不同处理阶段的数据转化工作，从而保证代码在不同执行阶段的无缝切换
						(3). 在XWork框架的调用接口ActionProxy中，我们将不再看到任何与Web容器相关的对象	


			10.3 第二战场————XWork处理阶段

				10.3.1 进行控制权的移交

					10.3.1.1 ActionProxy数据源

						DefaultActionInvocation.createContextMap()

					10.3.1.2 ActionInvocation初始化

						ActionInvocation.init()

				10.3.2 ActionInvocation调度再分析

					DefaultActionInvocation.invoke()

			10.4 小结										// 2019-8-3 11:47:45

		第11章 展翅高飞--让视图放开手脚	:P339

			11.1 视图(View)概述

				11.1.1 视图表现技术

					11.1.1.1 JSP技术

						解决了页面视图的构建问题————以HTML代码作为构建基础

						解决了与服务器端进行数据沟通的问题————以Java语言作为沟通基础

					11.1.1.2 Servlet技术

						所有的JSP在运行期都被编译成Servlet在Web容器中运行

				11.1.2 视图的本质

					浏览器与服务器端程序交互的三大要素：

						沟通协议————Http协议
						请求内容————Http请求：HttpServletRequest
						响应内容————Http响应：HttpServletResponse

				11.1.3 视图的职责

					视图内容呈现————以HTML为基础的构建

					数据和逻辑呈现————以Java语法为基础进行的构建

			11.2 深入Result机制

				11.2.1 Result的不同视角

					11.2.1.1 XWork视角————事件处理节点

					11.2.1.2 Struts2视角————视图的操作窗口

						ServletDispatcherResult.java

						StreamResult.java

				11.2.2 Reulst职责分析

					最大的职责就是：架起Controller层到View层的桥梁

			11.3 标签库、永恒的争论话题

				11.3.1 标签库产生的初衷

				11.3.2 标签库：毒药还是解药

				11.3.3 标签库的发展趋势

				11.3.4 标签库的分类

					11.3.4.1 逻辑控制类标签

					11.3.4.2 数据输出类标签

					11.3.4.3 页面组件类标签

			11.4 数据访问的哲学

				11.4.1 不要问我从哪里来

				11.4.2 不要问我长什么样

					所有的数据都被封装于ActionContext的数据环境中	ActionContext与ValueStack都是线程安全的数据流对象
										↓											↓
											对于数据的访问可以通过ValueStack来完成	  	       Action位于ValueStack中，是ValueStack操作的根对象
																↓									↓
													    数据访问通过ValueStack进行，访问的数据位于Action的属性变量中

			11.5 小结										// 2019-8-3 16:32:42

		第12章 三头六臂--Struts2的扩展机制	:P360

			12.1 程序和扩展机制的深入思考

				12.1.1 插件模式的基本概念

					12.1.1.1 软件功能模块化

					12.1.1.2 核心程序与功能模块

				12.1.2 常见的插件模式

					12.1.2.1 浏览器————Firefox

					12.1.2.2 编程IDE————Eclipse

				12.1.3 插件的利弊分析

					12.1.3.1 正面因素

					12.1.3.2 反面因素

			12.2 Struts2的插件模式

				12.2.1 深入Struts插件

					12.2.1.1 表现形式

						框架的本质是JAR包，起作用是针对JDK进行扩展

					12.2.1.2 安装使用

					12.2.1.3 依赖关系

					12.2.1.4 扩展点

				12.2.2 Struts插件分类

					12.2.2.1 框架整合类插件

					12.2.2.2 简化配置类插件

					12.2.2.3 页面装饰类插件

					12.2.2.4 功能扩展类插件

				12.2.3 插件加载概述

					12.2.3.1 插件加载概述

					12.2.3.2 配置加载接口的定义

					12.2.3.3 配置加载接口的使用

			12.3 小结

		后记													// 2019-8-3 16:47:53 全书完