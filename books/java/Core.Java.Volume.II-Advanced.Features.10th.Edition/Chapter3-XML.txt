Chapter3.XML

	log: start 2020-6-28 19:49:06  done 2020-6-29 00:20:17 （笔记待补）

	3.1 XML简介

		<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE configuration...>
		<configuration>
			<title>
				<font>
					<name>Helveticia</name>
					<size>36</size>
				</font>
			</title>
			<body>
				<font>
					<name>Times Roman</name>
					<size>12</size>
				</font>
			</body>
			<window>
				<width>400</width>
				<height>200</height>
			</window>
			<color>
				<red>0</red>
				<green>50</green>
				<blue>100</blue>
			</color>
			<menu>
				<item>Times Roman</item>
				<item>Helveticia</item>
				<item>Goudy Old Style</item>
			</menu>
		</configuration>

	3.2 XML文档解析

		Java库中提供了两种xml解析器：

			- 树形解析器，比如DOM(Document Object Model)，会将xml文档解析为树结构。
			- 流式解析器，比如SAX(Simple API for XML)，会读取xml文档并生成相关事件。

		- 树形解析器:

			// 初始化文档构造器
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            // 解析文件、URL、输入流
            File file = ...
            Document doc = builder.parse(file);
            URL url = ...
            Document doc = builder.parse(url);
            InputStream in = ...
            Document doc = builder.parse(in);  // 使用输入流时，解析器无法加载同路径下的其他引用，如同目录的DTD，可以通过添加"entity resolver"来解决该问题。

            // 获取根元素
            Element root = doc.getDocumentElement();

            // 获取子节点
            NoteList children = root.getChildNodes();

            // 遍历子节点
            for (int i = 0; i < children.getLength(); i++) {
            	Node child = children.item(i);
            	if (child instanceof Element) {
            		Element childElement = (Element)child;
            		Text textNode = (Text)childElement.getFirstChild();
            		String text = textNode.getData().trim();
            		if (childElement.getTagName().equals("name")) {
            			name = text;
            		} else if (childElement.getTagName().equals("size")) {
            			size = text;
            		}
            	}
            }

            for (Node childNode = element.getFirstChild(); 
            		childNode != null; 
            		childNode = childNode.getNextSibling()) {
            	// ...
            }

            // 遍历属性键值对
            NameNodeMap attributes = element.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
            	Node attribute = attributes.item(i);
            	String name = attribute.getNodeName();
            	String value = attribute.getNodeValue();
            }

            // 获取指定属性值
            String unit = element.getAttribute("unit");

        - 流式解析器:
        


	3.3 XML文档校验

		3.3.1 Document Type Definitions (DTD)

			xml:

				<?xml version="1.0"?>
				<!DOCTYPE configuration [
					<!ELEMENT configuration ...>
					more rules
					...
				]>
				<configuration>
					...
				</configuration>

				i.e:
				<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
				"http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">

			dtd:

				<!ELEMENT menu (item)*>
				<!ELEMENT font (name, size)>
				<!ELEMENT name (#PCDATA)>
				<!ELEMENT size (#PCDATA)>

			java:

				factory.setValidating(true);

				factory.setIgnoringElementContentWhitespace(true);

				build.setEntityResolver(resolver);

				build.setErrorHanlder(hanlder);

				for (int i = 0; i < children.getLength(); i++) {
					Node child = children.item(i);
					// 可省略了
					if (child instanceof Element) {}
					Element nameElement = (Element)child.item(0);
					Element sizeElement = (Element)child.item(1);
				}

		3.3.2 XML Schema 		// done 2020-6-28 22:46:55

			xml:

				<?xml version="1.0">
				<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
							xsi:noNamespaceSchemaLocation="config.xsd">
				</configuration>

			xsd:

				<xsd:simpleType name="StyleType">
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="PLAIN" />
						<xsd:enumeration value="BOLD" />
						<xsd:enumeration value="ITALIC" />
						<xsd:enumeration value="BOLD_ITALIC" />
					<xsd:restriction>
				</xsd:simpleType>

				<xsd:element name="name" type="xsd:string">
				<xsd:element name="size" type="xsd:int">
				<xsd:element name="style" type="StyleType">

			java:

				factory.setNamespaceAware(true);

				final String JAXP_SHCEMA_LANGUAGE = "http://java.sum.com/xml/jaxp/properties/schemaLanguage";

				final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";

				factory.setAttribute(JAXP_SHCEMA_LANGUAGE, W3C_XML_SCHEMA);

		3.3.3 A Practical Example

			java: GridBagTest.java

	3.4 使用XPath定位信息

		xml:

			<configuration>
				...
					<database>
						<username>dbuser</username>
						<password>secret</password>
					</database>
				...
			</configuration>

		java:
		
			XPathFactory xpFactory = XPathFactory.newInstance();	
			XPath path = xpFactory.newXPath();

			String expression = "/configuration/database/username";
			String username = path.evaluate(expression, doc);

			NodeList nodes = (NodeList) path.evaluate("gridbag/row", doc, XPathConstants.NODESET);
			Node nodes = (Node) path.evaluate("gridbag/row[1]", doc, XPathConstants.NODE);
			int count = ((Number) path.evaluate("count(gridbag/row)", doc, XPathConstants.NUMBER)).intValue();

	3.5 命名空间使用

		举例：
			http://www.w3.org/2001/XMLSchema

		开启：
			factory.setNamespaceAware(true);

	3.6 流式解析器

		SAX: Strem API for XML
		StAX: Java SE6++

		3.6.1 SAX解析器的使用


			java:
				SAXParserFactory factory = SAXParserFactory.newInstance();
				factory.setNamespaceAware(true);
				SAXParser parser = factory.newSAXParser();

				File/String(url)/InputStream source = ...
				parser.parse(source, handler);

			api:
			
				javax.xml.parsers.SAXParserFactory	
				javax.xml.parsers.SAXParser
				org.xml.sax.ContextHandler
				org.xml.sax.Attributes

		3.6.2 StAX解析器的使用

			java:
				InputStream in = url.openStream();
				XMLInputFactory factory = XMLInputFactory.newInstance();
				factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false);
				XMLStreamReader parser = factory.createXMLStreamReader(in);
				String units = parser.getAttributeValue(null, "units");
				while (parser.hasNext()) {
					int event = parser.next();
					// Call parser methods to obtain event details
				}

			api:	
				javax.xml.stream.XMLInputFactory
				javax.xml.stream.XMLStreamReader

	3.7 XML文档生成

		3.7.1 没有命名空间的文档

			java:
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	            DocumentBuilder builder = factory.newDocumentBuilder();
				Document doc = builder.newDocument();

				Element rootElement = doc.createElement(rootName);
				Element childElement = doc.createElement(childName);
				Text textNode = doc.createTextNode(textContents);

				doc.appendChild(rootElement);
				rootElement.appendChild(childElement);
				childElement.appendChild(textNode);

				rootElement.setAttribute(name, value);


		3.7.2 有命名空间的文档

			java:
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				factory.setNamespaceAware(true);
	            DocumentBuilder builder = factory.newDocumentBuilder();
				Document doc = builder.newDocument();

				String namespace = "http://www.w3.org/2000/svg";
				Element rootElement = doc.createElement(namespace, "svg");
				Element svgElement = doc.createElement(namespace, "svg:svg");

				rootElement.setAttributeNS(namespace, qualifiedName, value);

			xml:
				<svg:svg xmlns:svg="http://www.w3.org/2000/svg">	

		3.7.3 编写文档

			java:

				way1:
					// construct the do-nothing transformation
					Transformer t = TransformerFactory.newInstance().newTransformer();
					// set output properties to get a DOCTYPE node
					t.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, systemIdentifier);
					t.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, publicIdentifier);
					// set indentation
					t.setOutputProperty(OutputKeys.INDENT, "yes");
					t.setOutputProperty(OutputKeys.METHOD, "xml");
					t.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
					// apply the do-nothing transformation and send the output to a file
					t.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(file)));

				way2:	
					DOMImplementation impl = doc.getImplementation();
					DOMImplementationLS implLS = (DOMImplementationLS) impl.getFeature("LS", "3.0");
					LSSerializer ser = implLS.createLSSerializer();
					
					ser.getDomConfig().setParameter("format-pretty-print", true);
					
					String str = ser.writeToString(doc);

					LSOutput out = implLS.createLSOutput();
					out.setEncoding("UTF-8");
					out.setByteStream(Files.newOutputStream(path));
					ser.write(doc, out);

		3.7.4 例子：生成一个SVG文件

			API:
				javax.xml.parsers.DocumentBuilder
				org.w3c.dom.Document 
				org.w3c.dom.Node 
				org.w3c.dom.Element
				javax.xml.transform.TransformerFactory
				javax.xml.transform.Transformer
				javax.xml.transform.dom.DOMSource
				javax.xml.transform.stream.StreamResult

		3.7.5 使用StAX编写XML文档

			上文中，是通过写DOM树生成XML文档，如果DOM树没有其他的用处，这种方式不是很高效。
			可以通过StAX API直接生成XML。

			java:
				XMLOutputFactory factory = XMLOutputFactory.newInstance();
				XMLStreamWriter writer = factory.createXMLStreamWriter(out);
				// To produce the XML header, call
				writer.writeStartDocument()
				// Then call
				writer.writeStartElement(name);
				// Add attributes by calling
				writer.writeAttribute(name, value);
				// Now you can add child elements by calling writeStartElement again, or write characters with
				writer.writeCharacters(text);
				// When you have written all child nodes, call
				writer.writeEndElement();
				// This causes the current element to be closed.
				// To write an element without children (such as <img. . ./>), use the call
				writer.writeEmptyElement(name);
				// Finally, at the end of the document, call
				writer.writeEndDocument();
				// This call closes any open elements.
				// You still need to close the XMLStreamWriter, and you need to do it manually since the
				// XMLStreamWriter interface does not extend the AutoCloseable interface.

			API:
				javax.xml.stream.XMLOutputFactory 
				javax.xml.stream.XMLStreamWriter	

	3.6 XSLT

		XSL Transformation: 指定规则将XML文档转换为其他格式，如文本、XHTML或者其他XML格式。

		java:

			File styleSheet = new File(filename);
			StreamSource styleSource = new StreamSource(styleSheet);
			Transformer t = TransformerFactory.newInstance().newTransformer(styleSource);
			t.transform(source, result);
			t.transform(new DOMSource(doc), result);

			// 
			AttributesImpl attributes = new AttributesImpl();
			handler.startDocument();
			handler.startElement("", "staff", "staff", attributes);
			while ((line = in.readLine()) != null) {
				handler.startElement("", "employee", "employee", attributes);
				StringTokenizer t = new StringTokenizer(line, "|");
				handler.startElement("", "name", "name", attributes);
				String s = t.nextToken();
				handler.characters(s.toCharArray(), 0, s.length());
				handler.endElement("", "name", "name");
				...
				handler.endElement("", "employee", "employee");
			}
			handler.endElement("", rootElement, rootElement);
			handler.endDocument();

			// The SAXSource for the transformer is constructed from the XML reader:
			t.transform(new SAXSource(new EmployeeReader(), 
				new InputSource(new FileInputStream(filename))), result);

			// To store the result in a DOM tree, use a DocumentBuilder to generate a new document node and wrap it into a DOMResult:	
			Document doc = builder.newDocument();
			t.transform(source, new DOMResult(doc));

			// To save the output in a file, use a StreamResult:
			t.transform(source, new StreamResult(file));

		API:
			javax.xml.transform.TransformerFactory
			javax.xml.transform.stream.StreamSource
			javax.xml.transform.sax.SAXSource
			org.xml.sax.XMLReader
			javax.xml.transform.dom.DOMResult 
			org.xml.sax.helpers.AttributesImpl	