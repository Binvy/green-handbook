Chapter3.XML

	log: start 2020-6-28 19:49:06  done 2020-6-29 00:20:17 （笔记待补）

	3.1 XML简介

		<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE configuration...>
		<configuration>
			<title>
				<font>
					<name>Helveticia</name>
					<size>36</size>
				</font>
			</title>
			<body>
				<font>
					<name>Times Roman</name>
					<size>12</size>
				</font>
			</body>
			<window>
				<width>400</width>
				<height>200</height>
			</window>
			<color>
				<red>0</red>
				<green>50</green>
				<blue>100</blue>
			</color>
			<menu>
				<item>Times Roman</item>
				<item>Helveticia</item>
				<item>Goudy Old Style</item>
			</menu>
		</configuration>

	3.2 XML文档解析

		Java库中提供了两种xml解析器：

			- 树形解析器，比如DOM(Document Object Model)，会将xml文档解析为树结构。
			- 流式解析器，比如SAX(Simple API for XML)，会读取xml文档并生成相关事件。

		- 树形解析器:

			// 初始化文档构造器
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            // 解析文件、URL、输入流
            File file = ...
            Document doc = builder.parse(file);
            URL url = ...
            Document doc = builder.parse(url);
            InputStream in = ...
            Document doc = builder.parse(in);  // 使用输入流时，解析器无法加载同路径下的其他引用，如同目录的DTD，可以通过添加"entity resolver"来解决该问题。

            // 获取根元素
            Element root = doc.getDocumentElement();

            // 获取子节点
            NoteList children = root.getChildNodes();

            // 遍历子节点
            for (int i = 0; i < children.getLength(); i++) {
            	Node child = children.item(i);
            	if (child instanceof Element) {
            		Element childElement = (Element)child;
            		Text textNode = (Text)childElement.getFirstChild();
            		String text = textNode.getData().trim();
            		if (childElement.getTagName().equals("name")) {
            			name = text;
            		} else if (childElement.getTagName().equals("size")) {
            			size = text;
            		}
            	}
            }

            for (Node childNode = element.getFirstChild(); 
            		childNode != null; 
            		childNode = childNode.getNextSibling()) {
            	// ...
            }

            // 遍历属性键值对
            NameNodeMap attributes = element.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
            	Node attribute = attributes.item(i);
            	String name = attribute.getNodeName();
            	String value = attribute.getNodeValue();
            }

            // 获取指定属性值
            String unit = element.getAttribute("unit");

        - 流式解析器:
        


	3.3 XML文档校验

		3.3.1 Document Type Definitions (DTD)

			xml:

				<?xml version="1.0"?>
				<!DOCTYPE configuration [
					<!ELEMENT configuration ...>
					more rules
					...
				]>
				<configuration>
					...
				</configuration>

				i.e:
				<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
				"http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">

			dtd:

				<!ELEMENT menu (item)*>
				<!ELEMENT font (name, size)>
				<!ELEMENT name (#PCDATA)>
				<!ELEMENT size (#PCDATA)>

			java:

				factory.setValidating(true);

				factory.setIgnoringElementContentWhitespace(true);

				build.setEntityResolver(resolver);

				build.setErrorHanlder(hanlder);

				for (int i = 0; i < children.getLength(); i++) {
					Node child = children.item(i);
					// 可省略了
					if (child instanceof Element) {}
					Element nameElement = (Element)child.item(0);
					Element sizeElement = (Element)child.item(1);
				}

		3.3.2 XML Schema 		// done 2020-6-28 22:46:55

			xml:

				<?xml version="1.0">
				<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
							xsi:noNamespaceSchemaLocation="config.xsd">
				</configuration>

			xsd:

				<xsd:simpleType name="StyleType">
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="PLAIN" />
						<xsd:enumeration value="BOLD" />
						<xsd:enumeration value="ITALIC" />
						<xsd:enumeration value="BOLD_ITALIC" />
					<xsd:restriction>
				</xsd:simpleType>

				<xsd:element name="name" type="xsd:string">
				<xsd:element name="size" type="xsd:int">
				<xsd:element name="style" type="StyleType">

			java:

				factory.setNamespaceAware(true);

				final String JAXP_SHCEMA_LANGUAGE = "http://java.sum.com/xml/jaxp/properties/schemaLanguage";

				final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";

				factory.setAttribute(JAXP_SHCEMA_LANGUAGE, W3C_XML_SCHEMA);

		3.3.3 A Practical Example

			java: GridBagTest.java

	3.4 使用XPath定位信息

	3.5 命名空间使用

	3.6 流式解析器

		SAX: Strem API for XML
		StAX: Java SE6++

		3.6.1 SAX解析器的使用

		3.6.2 StAX解析器的使用

	3.7 XML文档生成

		3.7.1 没有命名空间的文档

		3.7.2 有命名空间的文档

		3.7.3 编写文档

		3.7.4 例子：生成一个SVG文件

		3.7.5 使用StAX编写XML文档

	3.6 XSLT

		XSL Transformation: 指定规则将XML文档转换为其他格式，如文本、XHTML或者其他XML格式。




